{"version":3,"sources":["app.js","focusMe.directive.js","myPagination.directive.js","reservationGrid.js","authentication.service.js","authenticationInterceptor.service.js","authenticationSettings.constant.js","currentUser.service.js","datetime.service.js","httpRequest.service.js","lookup.service.js","helperMethods.service.js","applicationInsights.service.js","startup.js","warningModal.controller.js","state.js","appLayout.controller.js","dashboard.controller.js","flightBoard.controller.js","flightBoard.service.js","index.controller.js","login.controller.js","login.service.js","simpleLogin.controller.js","root.controller.js","report.controller.js","report.service.js","reservationsReport.controller.js"],"names":["angular","module","focusMe","$timeout","scope","focus","link","element","$watch","value","directive","$inject","myPagination","FlightBoardService","myController","pageChanged","vm","currentPage","console","log","ampersand","size","counter","SetPaginationCounter","itemsPerPage","begin","end","activate","this","PageChanged","restrict","controller","controllerAs","bindToController","templateUrl","reservationGrid","reservations","AuthenticationService","LoginService","localStorageService","loginUser","userObject","loginPromise","PostLogin","then","data","setAuthenticationData","accessToken","access_token","userName","UserName","accessTokenExpires","userRoles","UserRoles","split","getLocalDataStorage","key","get","logOut","i","self","dataInStorage","clearAuthenticationData","set","remove","service","LoginUser","GetLocalDataStorage","LogOut","factory","AuthenticationInterceptorService","$q","$injector","$window","_request","config","headers","authenticationData","Authorization","request","constant","AuthenticationAPI","ResourcesAPI","CurrentUserService","setFlightBoardConfiguration","obj","flightBoardConfigKey","getFlightBoardConfiguration","getCurrentUserData","GetFlightBoardConfiguration","SetFlightBoardConfiguration","GetCurrentUserData","DateTimeService","addHoursToTodaysDateTime","numberOfHours","moment","add","hourSymbol","format","dateTimeFormat","getTimeFromDateTime","datetime","momentDate","timeFormat","formatDate","date","dateFormat","formatDateTime","formatTime","setHoursToDate","hours","arithmetic","subtract","getTodaysDate","getTodaysTime","getDateFormats","dateFormats","getDateOptions","dateOptions","getAltInputFormats","altInputFormats","getDateParts","d","dateParts","year","day","month","getDifference","start","measurement","startDate","endDate","diff","formatDateYear","formatMomentDateYear","formatYear","startingDay","showWeeks","AddHoursToTodaysDateTime","SetHoursToDate","FormatDate","FormatDateTime","FormatTime","FormatDateYear","FormatMomentDateYear","GetTimeFromDateTime","GetTodaysDate","GetTodaysTime","GetDateFormats","GetDateOptions","GetAltInputFormats","GetDateParts","GetDifference","HttpRequestService","$http","Go","httpConfiguration","deferred","defer","success","status","resolve","error","reject","promise","LookupService","AuthenticationSettings","formatBases","callback","method","url","push","BaseId","Iata","err","basePromise","undefined","FormatBases","HelperMethodsService","isObjectNull","length","isPropertyEmpty","trim","IsObjectNull","IsPropertyEmpty","ApplicationInsightsService","trackException","properties","measurements","getApplicationInsights","trackEvent","event","applicationInsights","window","appInsights","TrackException","TrackEvent","authenticationInterceptor","$httpProvider","interceptors","runBlock","$rootScope","$state","$on","toState","toParams","fromState","fromParams","userAuthentication","loginRoute","simpleLogin","root","name","preventDefault","go","TriggerModal","run","message","WarningModalController","$scope","$uibModalInstance","ok","dismiss","mainState","$stateProvider","$urlRouterProvider","state","views","rootLayout","AppLayoutController","$location","$uibModal","setUp","path","open","isSideNavClosed","args","close","navigateTo","route","title","Logout","Open","NavigateTo","DashboardController","ReportService","res","currentUser","errorObject","bases","baseSelected","item","model","label","base","httpRequestPromise","httpPromise","generateReservationReport","baseId","startDateTime","durationHours","GenerateReservationReport","displaySelect","selected","BaseSelected","FlightBoardController","$interval","setUpDateTime","flightBoardConfiguration","getReservationsByBase","$emit","getReservationsIntervalPromise","getTodaysTimeIntervalPromise","todaysTime","isDefined","cancel","flightBoardDate","calendarDate","Date","requestObject","getRequestObject","reservationsPromise","GetReservationsByBase","FlattenReservation","collection","StructureReservationData","arrivals","Arrivals","departures","Departures","sameDayFlights","heavyCharters","StartDateTime","getFlightBoardDate","DurationHours","hourRange","fetchReservations","partOfDate","openFlightBoardCalendar","isFlightBoardCalendarOpen","dateChanged","setFlightBoardDate","transports","FetchReservations","OpenFlightBoardCalendar","DateChanged","formats","triggerModal","trigger","flightBoardRoute","animation","JSON","stringify","getUserSettings","Roles","structureReservationData","getFlights","checkDeparturesForHeavyTransport","removeFlights","sortArrivals","sortSameDayFlights","sortDepartures","sortHeavyCharters","sortFlights","sections","arrival","formatReservationTimes","flightDirection","id","sameDay","departure","IsArrival","IsDeparture","IsSameDay","isHeavyCharter","array","section","sort","aFlight","bFlight","aDateTime","bDateTime","ArrivalFlightInformation","FlightDateTime","EstimatedFlightDateTime","sortMethodForSameDayFlights","DepartureFlightInformation","flight","dateTime","enter","flattenReservation","startFlattenProcess","isQuickTurn","QuickTurn","difference","AircraftType","heavyCharterTypes","indexOf","toLowerCase","index","splice","j","arrivalsIndex","departuresIndex","flightDirectionId","flattenGroundTransportation","flattenAircraftServices","flattenTransactionPayment","CustomsRequiredInbound","AircraftServices","serviceCategory","ServiceCategory","Fuel","Quantity","Comments","Active","AircraftServiceId","LastUpdatedBy","ProductCode","ServiceCategoryId","Status","Type","ProductDescription","GroundTransportations","all","transportationType","CarType","Name","type","nameAbbreviation","abbreviation","fullTransportationLabel","count","copy","b","current","c","flagged","AllTransportations","Text","s","InvoiceIcon","InvoiceText","transactionPaymentStatus","PosTransactionId","Payments","transactionHeaderStatus","PosTransactionStatus","directBillNumber","DirectBillNumber","CardOnFile","Id","prefix","fuelTypes","GetUserSettings","IsQuickTurn","SortFlights","IsHeavyCharter","RemoveFlights","GetFlights","CheckDeparturesForHeavyTransport","IndexController","LoginController","loginForm","$invalid","displayError","grant_type","username","userCredentails","password","errorDescription","error_description","errorMessage","postLogin","Content-type","SimpleLoginController","clickedCircle","saveNumber","colorSmallCircle","checkPasscodeLength","numbers","text","passcode","smallCircles","deletePasscode","ClickedCircle","DeletePasscode","RootController","ReportController","ReservationsReportController","viewReport","getBaseId","submit","isOpen","setBaseId","reset","ViewReport","GetBaseId","Reset"],"mappings":"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","file":"../allminified.min.js","sourcesContent":["(function () {\r\n    'use strict';\n\n    angular.module('app', [\n        // Angular modules\n        'ngAnimate',\n        'angular-loading-bar',\n\n        // Custom modules\n\n        // 3rd Party Modules\n         'ui.bootstrap',\n         'ui.router',\n         'LocalStorageModule',\n         'cgBusy'\n    ]);\r\n})();\n","(function () {\r\n    angular\r\n        .module('app')\r\n        .directive('focusMe', focusMe);\r\n\r\n    focusMe.$inject = ['$timeout'];\r\n\r\n    function focusMe($timeout) {\r\n        return {\r\n            scope: { focus: '=focusMe' },\r\n            link: function (scope, element) {\r\n                scope.$watch('focus', function (value) {\r\n                    if (value === true) {\r\n                        $timeout(function () {\r\n                            element[0].focus();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n})();","/*Still Implementing not ready for production*/\r\n(function () {\r\n    angular\r\n        .module('app')\r\n        .directive(\"myPagination\", myPagination);\r\n\r\n    myPagination.$inject = [\"FlightBoardService\"];\r\n\r\n\r\n    function myPagination(FlightBoardService) {\r\n        return {\r\n            restrict: 'EA', // E = element, A= Attribute\r\n            scope: { itemsPerPage: \"=\", size: \"=\", currentPage: \"=\", ampersand: \"&\" },\r\n            controller: myController,\r\n            controllerAs: 'vm',\r\n            bindToController: true,\r\n            templateUrl: 'app/core/templates/myPagination.html',\r\n        };\r\n\r\n\r\n        function myController() {\r\n            var vm = this;\r\n            vm.PageChanged = pageChanged;\r\n\r\n            function pageChanged() {\r\n                //TODO: Needs to call data source here, then update the counter. \r\n\r\n\r\n                if (vm.currentPage > 1) {\r\n                    console.log(\"enter here first\");\r\n                    vm.ampersand({ currentPage: vm.currentPage });\r\n                }\r\n                console.log(vm.currentPage);\r\n                console.log(vm.size);\r\n                console.log(\"directive continues down the code\");\r\n                var counter = FlightBoardService.SetPaginationCounter(vm.itemsPerPage, vm.size, vm.currentPage);\r\n                vm.begin = counter.begin;\r\n                vm.end = counter.end;\r\n\r\n            }\r\n\r\n            activate();\r\n            function activate() {\r\n                //Intialize the counter values\r\n                pageChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\r\n/*Usage:\r\n        <my-pagination items-per-page=\"vm.itemsPerPage\" size=\"vm.departureData.length\" current-page=\"vm.currentPage\" ampersand=\"vm.FetchDepartureData(currentPage)\"></my-pagination>\r\n        <div class=\"col-sm-12\" style=\"padding-top: 0px\">\r\n            <uib-pagination class=\"pull-right\" total-items=\"vm.totalItems\" ng-model=\"vm.currentPage\" ng-change=\"vm.PageChanged()\"></uib-pagination>\r\n        </div>\r\n\r\n Parent Controller: \r\n    function fetchDepartureData(currentPage) {\r\n    vm.departureData = [{ prop: 1 }, { prop: 1 }, { prop: 1 }];\r\n}\r\n\r\n*/","(function () {\r\n    angular\r\n        .module('app')\r\n        .directive(\"reservationGrid\", reservationGrid);\r\n\r\n    reservationGrid.$inject = [];\r\n\r\n\r\n    function reservationGrid() {\r\n        return {\r\n            restrict: 'EA', // E = element, A= Attribute\r\n            scope: { reservations: \"=\" },\r\n            bindToController: true,\r\n            templateUrl: 'app/core/templates/reservation.html',\r\n            controller: myController,\r\n            controllerAs: 'vm',\r\n        };\r\n\r\n        function myController() { }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('AuthenticationService', AuthenticationService);\r\n\r\n    AuthenticationService.$inject = ['LoginService', 'localStorageService'];\r\n\r\n    function AuthenticationService(LoginService, localStorageService) {\r\n        var self = this;\r\n        self.dataInStorage = ['authenticationData', 'flightBoardConfig'];\r\n\r\n        var service = {\r\n            LoginUser: loginUser,\r\n            GetLocalDataStorage: getLocalDataStorage,\r\n            LogOut: logOut\r\n        };\r\n\r\n        return service;\r\n\r\n        function loginUser(userObject) {\r\n            var loginPromise = LoginService.PostLogin(userObject);\r\n            loginPromise.then(function (data) {\r\n                setAuthenticationData('authenticationData', {\r\n                    accessToken: data.access_token,\r\n                    userName: data.UserName,\r\n                    accessTokenExpires: data[\".expires\"],\r\n                    userRoles: data.UserRoles.split(\",\")\r\n                });\r\n            });\r\n\r\n            return loginPromise;\r\n        }\r\n\r\n        function getLocalDataStorage(key) {\r\n            return localStorageService.get(key);\r\n        }\r\n\r\n        function logOut(key) {\r\n            for (var i in self.dataInStorage) {\r\n                clearAuthenticationData(self.dataInStorage[i]);\r\n            }\r\n        }\r\n\r\n\r\n        function setAuthenticationData(key, value) {\r\n            localStorageService.set(key, value);\r\n        }\r\n\r\n        function clearAuthenticationData(key) {\r\n            return localStorageService.remove(key);\r\n        }\r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('AuthenticationInterceptorService', AuthenticationInterceptorService);\r\n\r\n    AuthenticationInterceptorService.$inject = ['$q', '$injector', '$window', '$timeout', 'localStorageService'];\r\n\r\n    function AuthenticationInterceptorService($q, $injector, $window, $timeout, localStorageService) {\r\n        return {\r\n            request: _request,\r\n        };\r\n\r\n        function _request(config) {\r\n            config.headers = config.headers || {};\r\n\r\n            var authenticationData = localStorageService.get('authenticationData');\r\n        \r\n            if (authenticationData) {\r\n                config.headers.Authorization = 'Bearer ' + authenticationData.accessToken;\r\n            }\r\n\r\n            return config;\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .constant(\"AuthenticationSettings\", {\r\n            AuthenticationAPI: 'http://signetapi-development.trafficmanager.net/',\r\n            ResourcesAPI: 'http://signetapi-development.trafficmanager.net/'\r\n        });\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('CurrentUserService', CurrentUserService);\r\n\r\n    CurrentUserService.$inject = ['localStorageService', 'AuthenticationService'];\r\n\r\n    function CurrentUserService(localStorageService, AuthenticationService) {\r\n        var self = this;\r\n        self.flightBoardConfigKey = 'flightBoardConfig';\r\n\r\n        return {\r\n            GetFlightBoardConfiguration: getFlightBoardConfiguration,\r\n            SetFlightBoardConfiguration: setFlightBoardConfiguration,\r\n            GetCurrentUserData: getCurrentUserData\r\n\r\n        };\r\n\r\n        function setFlightBoardConfiguration(obj) {\r\n            localStorageService.set(self.flightBoardConfigKey, obj);\r\n        }\r\n\r\n        function getFlightBoardConfiguration() {\r\n            return localStorageService.get(self.flightBoardConfigKey);\r\n        }\r\n\r\n        function getCurrentUserData() {\r\n            return AuthenticationService.GetLocalDataStorage(\"authenticationData\");\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory(\"DateTimeService\", DateTimeService);\r\n\r\n    DateTimeService.$inject = [];\r\n\r\n    function DateTimeService() {\r\n        var self = this;\r\n        self.date = new moment();\r\n        self.dateFormat = \"M/DD/YYYY\";\r\n        self.dateTimeFormat = \"M/DD/YYYY HH:mm\";\r\n        self.timeFormat = \"HH:mm\";\r\n        self.hourSymbol = \"h\";\r\n        self.dateFormats = ['dd-MMMM-yyyy', 'YYYY-MM-DD', 'dd.MM.yyyy', 'MM/dd/yyyy', 'shortDate'];\r\n        self.dateOptions = { formatYear: 'yy', startingDay: 1, showWeeks: true };\r\n        self.altInputFormats = ['M!/d!/yyyy'];\r\n\r\n        var service = {\r\n            AddHoursToTodaysDateTime: addHoursToTodaysDateTime,\r\n            SetHoursToDate: setHoursToDate,\r\n            FormatDate: formatDate,\r\n            FormatDateTime: formatDateTime,\r\n            FormatTime: formatTime,\r\n            FormatDateYear: formatDateYear,\r\n            FormatMomentDateYear: formatMomentDateYear,\r\n            GetTimeFromDateTime: getTimeFromDateTime,\r\n            GetTodaysDate: getTodaysDate,\r\n            GetTodaysTime: getTodaysTime,\r\n            GetDateFormats: getDateFormats,\r\n            GetDateOptions: getDateOptions,\r\n            GetAltInputFormats: getAltInputFormats,\r\n            GetDateParts: getDateParts,\r\n            GetDifference: getDifference\r\n        };\r\n\r\n        return service;\r\n\r\n        function addHoursToTodaysDateTime(numberOfHours) {\r\n            return moment().add(numberOfHours, self.hourSymbol).format(self.dateTimeFormat);\r\n        }\r\n\r\n        function addHoursToDateTime(numberOfHours, datetime) {\r\n            return datetime.add(numberOfHours, self.hourSymbol).format(self.dateTimeFormat);\r\n        }\r\n\r\n        function getTimeFromDateTime(datetime) {\r\n            var momentDate = moment(datetime);\r\n            return momentDate.format(self.timeFormat);\r\n        }\r\n\r\n        function formatDate(date) {\r\n            return moment(date).format(self.dateFormat);\r\n        }\r\n\r\n        function formatDateTime(datetime) {\r\n            return moment(datetime).format(self.dateTimeFormat);\r\n        }\r\n\r\n        function formatTime(date) {\r\n            return moment(date).format(self.timeFormat);\r\n        }\r\n\r\n        function setHoursToDate(date, hours, arithmetic) {\r\n            switch (arithmetic) {\r\n                case 'a':\r\n                    return moment(date, self.dateFormat).add(hours, self.hourSymbol).format(self.dateFormat);\r\n                case 's':\r\n                    return moment(date, self.dateFormat).subtract(hours, self.hourSymbol).format(self.dateFormat);\r\n            }\r\n        }\r\n\r\n        function getTodaysDate() {\r\n            return moment().format(self.dateFormat);\r\n        }\r\n\r\n        function getTodaysTime() {\r\n            return moment().format(self.timeFormat);\r\n        }\r\n\r\n        function getTodaysDateTime() {\r\n            return moment().format(self.dateTimeFormat);\r\n        }\r\n\r\n        function getDateFormats() {\r\n            return self.dateFormats;\r\n        }\r\n\r\n        function getDateOptions() {\r\n            return self.dateOptions;\r\n        }\r\n\r\n        function getAltInputFormats() {\r\n            return self.altInputFormats;\r\n        }\r\n\r\n        function getDateParts(date) {\r\n            var d = moment(date, self.dateFormat);\r\n            var dateParts = { year: d.year(), day: d.date(), month: d.month() };\r\n            return dateParts;\r\n        }\r\n\r\n        function getDifference(start, end, measurement) {\r\n            var startDate = moment(start);\r\n            var endDate = moment(end);\r\n            return endDate.diff(startDate, measurement);\r\n        }\r\n\r\n        function formatDateYear(date) {\r\n            return moment(date).format(self.dateFormats[1]); \r\n        }\r\n\r\n        function formatMomentDateYear() {\r\n            return moment().format(self.dateFormats[1]); \r\n        }\r\n\r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('HttpRequestService', HttpRequestService);\r\n\r\n    HttpRequestService.$inject = ['$q', '$http'];\r\n\r\n    function HttpRequestService($q, $http) {\r\n        return {\r\n            Go: Go\r\n        };\r\n\r\n        function Go(httpConfiguration) {\r\n            var deferred = $q.defer();\r\n            $http(httpConfiguration).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (data, status, headers, config) {\r\n                deferred.reject(data);\r\n            });\r\n            return deferred.promise;\r\n        }\r\n    }\r\n\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('LookupService', LookupService);\r\n\r\n    LookupService.$inject = ['HttpRequestService', 'AuthenticationSettings'];\r\n\r\n    function LookupService(HttpRequestService, AuthenticationSettings) {\r\n        var self = this;\r\n        self.basePromise = undefined;\r\n\r\n        return {\r\n            FormatBases: formatBases\r\n        };\r\n\r\n        /*API Services*/\r\n\r\n        function formatBases(callback) {\r\n            HttpRequestService.Go({\r\n                method: 'GET',\r\n                url: AuthenticationSettings.ResourcesAPI + \"api/Lookup/\" + \"GetCpaBases\"\r\n            }).then(function (data) {\r\n                var format = [];\r\n                for (var i in data) {\r\n                    format.push({ BaseId: data[i].BaseId, Iata: data[i].Iata });\r\n                }\r\n                callback(null, format);\r\n            }).catch(function (err) {\r\n                callback(err, null);\r\n            }); \r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('HelperMethodsService', HelperMethodsService);\r\n\r\n    HelperMethodsService.$inject = [];\r\n\r\n    function HelperMethodsService() {\r\n\r\n        return {\r\n            IsObjectNull: isObjectNull,\r\n            IsPropertyEmpty: isPropertyEmpty\r\n        };\r\n\r\n        function isObjectNull(obj) {\r\n            return (obj === null || obj === undefined || obj.length === 0);\r\n        }\r\n\r\n        function isPropertyEmpty(value) {\r\n            return ((value === null || value === undefined) || (value.trim().length === 0));\r\n        }\r\n    }\r\n\r\n\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('ApplicationInsightsService', ApplicationInsightsService);\r\n\r\n    ApplicationInsightsService.$inject = [];\r\n\r\n    function ApplicationInsightsService() {\r\n        var self = this;\r\n        self.applicationInsights = window.appInsights;\r\n\r\n        return {\r\n            TrackException: trackException,\r\n            TrackEvent: trackEvent\r\n        };\r\n\r\n        function trackException(err, properties, measurements ) {\r\n            if (getApplicationInsights()) {\r\n                getApplicationInsights().trackException(err, properties, measurements);\r\n            }\r\n        }\r\n\r\n        function trackEvent(event) {\r\n            if (getApplicationInsights()) {\r\n                getApplicationInsights().trackEvent(event);\r\n            }\r\n        }\r\n\r\n        function getApplicationInsights() {\r\n            return self.applicationInsights || window.appInsights; \r\n        }\r\n\r\n    }\r\n})(); ","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(authenticationInterceptor); \r\n        \r\n    authenticationInterceptor.$inject = ['$httpProvider'];\r\n\r\n    function authenticationInterceptor($httpProvider) {\r\n        $httpProvider.interceptors.push('AuthenticationInterceptorService');\r\n    }\r\n})(); \r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .run(runBlock);\r\n\r\n    runBlock.$inject = ['$rootScope', '$state', '$timeout', 'AuthenticationService', 'FlightBoardService'];\r\n\r\n    function runBlock($rootScope, $state, $timeout, AuthenticationService, FlightBoardService) {\r\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n\r\n            var userAuthentication = AuthenticationService.GetLocalDataStorage(\"authenticationData\");\r\n            var loginRoute = 'root.login';\r\n            var simpleLogin = 'root.simpleLogin';\r\n            var root = \"root\";\r\n\r\n            //if user is not authenticated, and is routing to the login page then there is no need to route user. \r\n            if (!userAuthentication && (toState.name == loginRoute)) {\r\n                return;\r\n            }\r\n\r\n            //if user is authenticated then he should not be able to visit login page\r\n            if (userAuthentication && (toState.name == loginRoute)) {\r\n                event.preventDefault();\r\n                $timeout(function () {\r\n                    $state.go('root.appLayout.dashboard');\r\n                });\r\n            }\r\n\r\n            //If user is not authenticated, return user to the login view. \r\n            if (!userAuthentication && simpleLogin !== toState.name) {\r\n                event.preventDefault();\r\n                $timeout(function () {\r\n                    $state.go('root.login');\r\n                });\r\n            }\r\n\r\n            //if user is authenticated and starting the app. \r\n            if (userAuthentication && toState.name == root) {\r\n                $timeout(function () {\r\n                    $state.go('root.appLayout.dashboard');\r\n                });\r\n            }\r\n\r\n            if (userAuthentication && toState.name == 'root.appLayout.flightBoard' && (FlightBoardService.TriggerModal('root.appLayout.flightBoard'))) {\r\n                event.preventDefault();\r\n                $timeout(function () {\r\n                    if (fromState.name !== 'root.appLayout.flightBoard') {\r\n                        $state.go('root.appLayout.dashboard');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n})();\r\n\r\n\r\n/*Configuring angular-busy*/\r\nangular.module('app').value('cgBusyDefaults', {\r\n    message: '',\r\n    templateUrl: 'app/core/templates/customSplashScreen.html'\r\n});","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('WarningModalController', WarningModalController);\r\n\r\n    WarningModalController.$inject = ['$scope', '$uibModalInstance'];\r\n\r\n    function WarningModalController($scope, $uibModalInstance) {\r\n        /* jshint validthis:true */\r\n\r\n        $scope.ok = function () {\r\n            $uibModalInstance.dismiss('');\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(mainState);\r\n\r\n    mainState.$inject = ['$stateProvider', '$urlRouterProvider'];\r\n\r\n    function mainState($stateProvider, $urlRouterProvider) {\r\n\r\n        $stateProvider.state('root', {\r\n            url: '',\r\n            views: {\r\n                'rootLayout': {\r\n                    templateUrl: 'app/main/rootLayout/rootLayout.html'\r\n                }\r\n            }\r\n        })\r\n        .state('root.login', {\r\n            url: '/login',\r\n            templateUrl: 'app/main/login/login.html',\r\n            controller: 'LoginController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.simpleLogin', {\r\n            url: '/simplelogin',\r\n            templateUrl: 'app/main/simpleLogin/simpleLogin.html',\r\n            controller: 'SimpleLoginController',\r\n            controllerAs: \"vm\"\r\n        })\r\n        .state('root.appLayout', {\r\n            url: '/app',\r\n            templateUrl: 'app/main/application/appLayout.html',\r\n            controller: 'AppLayoutController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'app/main/dashboard/dashboard.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'vm',\r\n        })\r\n        .state('root.appLayout.flightBoard', {\r\n            url: '/flightboard',\r\n            templateUrl: 'app/main/flightBoard/flightBoard.html',\r\n            controller: 'FlightBoardController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.report', {\r\n            url: '/report',\r\n            templateUrl: 'app/main/report/report.html',\r\n            controller: 'ReportController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.report.reservations', {\r\n            url: '/reservationsreport',\r\n            templateUrl: 'app/main/report/reservations/reservations.html',\r\n            controller: 'ReservationsReportController',\r\n            controllerAs: 'vm'\r\n        });\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('AppLayoutController', AppLayoutController);\r\n\r\n    AppLayoutController.$inject = ['$scope', '$state', '$location', '$uibModal', 'AuthenticationService', 'CurrentUserService', 'FlightBoardService'];\r\n\r\n    function AppLayoutController($scope, $state, $location, $uibModal, AuthenticationService, CurrentUserService, FlightBoardService) {\r\n        /* jshint validthis:true */\r\n        var vm = this;\r\n        vm.isSideNavClosed = false;\r\n        vm.state = $state;\r\n\r\n        vm.userName = AuthenticationService.GetLocalDataStorage('authenticationData').userName;\r\n        vm.title = 'AppLayout Controller';\r\n\r\n        vm.Logout = logOut;\r\n        vm.Open = open;\r\n        vm.NavigateTo = navigateTo;\r\n        activate();\r\n\r\n        function activate() {\r\n            setUp();\r\n        }\r\n\r\n        function logOut() {\r\n            AuthenticationService.LogOut();\r\n            $location.path('/login');\r\n        }\r\n\r\n        function open() {\r\n            vm.isSideNavClosed = !vm.isSideNavClosed;\r\n        }\r\n\r\n        function setUp() {\r\n            $scope.$on('toggleSideNav', function (event, args) {\r\n                vm.isSideNavClosed = args.close;\r\n            });\r\n        }\r\n\r\n\r\n        function navigateTo(route) {\r\n            $state.go(route);\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('DashboardController', DashboardController);\r\n\r\n    DashboardController.$inject = ['$scope', '$state', 'LookupService', 'CurrentUserService', 'ReportService', 'DateTimeService', 'ApplicationInsightsService'];\r\n\r\n    function DashboardController($scope, $state, LookupService, CurrentUserService, ReportService, DateTimeService, ApplicationInsightsService) {\r\n        /* jshint validthis:true */\r\n        var vm = this;\r\n        vm.title = 'Dashboard Controller';\r\n        vm.bases = [];\r\n        vm.displaySelect = false;\r\n        vm.selected = CurrentUserService.GetFlightBoardConfiguration();\r\n        vm.base = vm.selected; \r\n        vm.currentUser = CurrentUserService.GetCurrentUserData('authenticationData');\r\n\r\n        vm.BaseSelected = baseSelected;\r\n        vm.NavigateTo = navigateTo;\r\n        vm.GenerateReservationReport = generateReservationReport; \r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            LookupService.FormatBases(function (err, res) {\r\n                if (err) {\r\n                    ApplicationInsightsService.TrackException(err.message, \"GET CPA BASES (Dashboard)\", { userName: vm.currentUser.userName, errorObject: err });\r\n                    console.log(err);\r\n                    return;\r\n                }\r\n                vm.bases = res;\r\n                ApplicationInsightsService.TrackEvent(\"Status: 200, Action: GET CPA BASES, handled: Dashboard\");\r\n            });\r\n            setUp();\r\n        }\r\n\r\n        function navigateTo(route) {\r\n            if (route) {\r\n                $state.go(route);\r\n            }\r\n        }\r\n\r\n        function baseSelected(item, model, label) {\r\n            CurrentUserService.SetFlightBoardConfiguration(model);\r\n            vm.base = model; \r\n        }\r\n\r\n        function setUp() {\r\n            $scope.$on('loadSplashScreen', function (event, args) {\r\n                vm.httpRequestPromise = args.httpPromise;\r\n            });\r\n        }\r\n\r\n        function generateReservationReport() {\r\n            var model = { baseId: vm.base.BaseId, startDateTime: DateTimeService.FormatMomentDateYear(), durationHours: 24 };\r\n            ReportService.GenerateReservationReport(model);\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('FlightBoardController', FlightBoardController);\r\n\r\n    FlightBoardController.$inject = ['$scope', '$interval', 'FlightBoardService', 'DateTimeService', 'CurrentUserService', 'ApplicationInsightsService'];\r\n\r\n    function FlightBoardController($scope, $interval, FlightBoardService, DateTimeService, CurrentUserService, ApplicationInsightsService) {\r\n        var vm = this;\r\n        vm.title = \"FlightBoard Controller\";\r\n        vm.arrivals = [];\r\n        vm.departures = [];\r\n        vm.transports = [];\r\n        vm.sameDayFlights = [];\r\n        vm.hourRange = 24;\r\n        vm.flightBoardConfiguration = {};\r\n        vm.currentUser = CurrentUserService.GetCurrentUserData('authenticationData');\r\n\r\n        vm.flightBoardDate = undefined;\r\n        vm.calendarDate = undefined;\r\n        vm.todaysTime = undefined;\r\n\r\n        vm.FetchReservations = fetchReservations;\r\n        vm.OpenFlightBoardCalendar = openFlightBoardCalendar;\r\n        vm.DateChanged = dateChanged;\r\n        vm.GetReservationsByBase = getReservationsByBase;\r\n\r\n        /* Common Date Configurations*/\r\n        vm.isFlightBoardCalendarOpen = false;\r\n        vm.formats = DateTimeService.GetDateFormats();\r\n        vm.format = vm.formats[3];\r\n        vm.dateOptions = DateTimeService.GetDateOptions();\r\n        vm.altInputFormats = DateTimeService.GetAltInputFormats();\r\n\r\n        activate();\r\n        function activate() {\r\n            setUp();\r\n            setUpDateTime();\r\n            vm.flightBoardConfiguration = CurrentUserService.GetFlightBoardConfiguration();\r\n            getReservationsByBase();\r\n        }\r\n\r\n        function setUp() {\r\n            $scope.$emit('toggleSideNav', { close: true });\r\n\r\n            vm.getReservationsIntervalPromise = $interval(function () { getReservationsByBase(); }, 30000);\r\n            vm.getTodaysTimeIntervalPromise = $interval(function () { vm.todaysTime = DateTimeService.GetTodaysTime(); }, 10000);\r\n\r\n            $scope.$on('$destroy', function () {\r\n                if (angular.isDefined(vm.getReservationsIntervalPromise)) {\r\n                    $interval.cancel(vm.getReservationsIntervalPromise);\r\n                }\r\n\r\n                if (angular.isDefined(vm.getTodaysTimeIntervalPromise)) {\r\n                    $interval.cancel(vm.getTodaysTimeIntervalPromise);\r\n                }\r\n            });\r\n        }\r\n\r\n        function setUpDateTime() {\r\n            vm.flightBoardDate = DateTimeService.GetTodaysDate();\r\n            vm.calendarDate = new Date();\r\n            vm.todaysTime = DateTimeService.GetTodaysTime();\r\n        }\r\n\r\n        function getReservationsByBase(baseId) {\r\n            vm.requestObject = getRequestObject(baseId);\r\n            vm.reservationsPromise = FlightBoardService.GetReservationsByBase(vm.requestObject);\r\n            vm.reservationsPromise.then(function (data) {\r\n\r\n                FlightBoardService.FlattenReservation(data);\r\n                var collection = FlightBoardService.StructureReservationData(data);\r\n\r\n                vm.arrivals = collection.data.Arrivals;\r\n                vm.departures = collection.data.Departures;\r\n                vm.sameDayFlights = collection.sameDayFlights;\r\n                vm.heavyCharters = collection.heavyCharters;\r\n\r\n                console.log(collection);\r\n\r\n            }).catch(function (err) {\r\n                ApplicationInsightsService.TrackException(err.message, \"GetReservationsByBase (FlightBoard)\", { userName: vm.currentUser.userName, errorObject: err });\r\n                console.log(err);\r\n            });\r\n        }\r\n\r\n        function getRequestObject(baseId) {\r\n            return {\r\n                BaseId: (vm.flightBoardConfiguration === null) ? baseId : vm.flightBoardConfiguration.BaseId,\r\n                StartDateTime: getFlightBoardDate(),\r\n                DurationHours: vm.hourRange\r\n            };\r\n        }\r\n\r\n        function fetchReservations(arithmetic) {\r\n            vm.flightBoardDate = DateTimeService.SetHoursToDate(getFlightBoardDate(), vm.hourRange, arithmetic);\r\n            var partOfDate = DateTimeService.GetDateParts(vm.flightBoardDate);\r\n            vm.calendarDate = new Date(partOfDate.year, partOfDate.month, partOfDate.day);\r\n            getReservationsByBase();\r\n        }\r\n\r\n        function openFlightBoardCalendar() {\r\n            vm.isFlightBoardCalendarOpen = !vm.isFlightBoardCalendarOpen;\r\n        }\r\n\r\n        function dateChanged() {\r\n            setFlightBoardDate(DateTimeService.FormatDate(vm.calendarDate));\r\n            getReservationsByBase();\r\n        }\r\n\r\n        function setFlightBoardDate(date) {\r\n            vm.flightBoardDate = date;\r\n        }\r\n\r\n        function getFlightBoardDate() {\r\n            return vm.flightBoardDate;\r\n        }\r\n\r\n        function loadSplashScreen(promise) {\r\n            $scope.$emit('loadSplashScreen', { httpPromise: promise });\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('FlightBoardService', FlightBoardService);\r\n\r\n    FlightBoardService.$inject = ['$interval', '$uibModal', 'HttpRequestService', 'AuthenticationSettings', 'DateTimeService', 'HelperMethodsService', 'CurrentUserService'];\r\n\r\n    function FlightBoardService($interval, $uibModal, HttpRequestService, AuthenticationSettings, DateTimeService, HelperMethodsService, CurrentUserService) {\r\n        var self = this;\r\n\r\n        self.serviceCategory = [\r\n            { Id: 1, name: 'Car' },\r\n            { Id: 2, name: 'Cater' },\r\n            { Id: 3, name: 'CustHandling' },\r\n            { Id: 4, name: 'Deice' },\r\n            { Id: 5, name: 'Etc' },\r\n            { Id: 6, name: 'Fuel' },\r\n            { Id: 7, name: 'Gpu' },\r\n            { Id: 8, name: 'Handling' },\r\n            { Id: 9, name: 'Hotel' },\r\n            { Id: 10, name: 'Intial' },\r\n            { Id: 11, name: 'Lav' },\r\n            { Id: 12, name: 'Other' },\r\n            { Id: 14, name: 'Secondary' },\r\n            { Id: 15, name: 'Water' }\r\n        ];\r\n\r\n        self.transportationType = [\r\n           { Id: 1, type: 'rental', abbreviation: 'R' },\r\n           { Id: 2, type: 'limo', abbreviation: 'L' },\r\n           { Id: 3, type: 'taxi', abbreviation: 'T' },\r\n           { Id: 4, type: 'crew car', abbreviation: 'C' },\r\n           { Id: 5, type: 'personal', abbreviation: 'P'}\r\n        ];\r\n\r\n        self.flightDirection = [{ id: 1, name: \"arrival\" }, { id: 2, name: \"departure\" }];\r\n        self.heavyCharterTypes = [\"tx\"];\r\n        self.flightBoardRoute = \"root.appLayout.flightBoard\";\r\n        self.prefix = \"Flight\";\r\n        self.fuelTypes = ['jet a +', 'avgas', '100ll', 'jet a -'];\r\n        self.sections = { arrival: 'arrival', sameDay: 'sameDay', departure: 'departure' };\r\n\r\n        return {\r\n            StructureReservationData: structureReservationData,\r\n            GetReservationsByBase: getReservationsByBase,\r\n            GetUserSettings: getUserSettings,\r\n            FlattenReservation: flattenReservation,\r\n            TriggerModal: triggerModal,\r\n            IsQuickTurn: isQuickTurn,\r\n            SortFlights: sortFlights,\r\n            IsHeavyCharter: isHeavyCharter,\r\n            RemoveFlights: removeFlights,\r\n            GetFlights: getFlights,\r\n            CheckDeparturesForHeavyTransport: checkDeparturesForHeavyTransport\r\n        };\r\n\r\n\r\n\r\n        function triggerModal(route) {\r\n            var trigger = false;\r\n\r\n            if (route !== self.flightBoardRoute) { return trigger; }\r\n\r\n            if (CurrentUserService.GetFlightBoardConfiguration() === null) {\r\n                var modalInstance = $uibModal.open({\r\n                    animation: true,\r\n                    templateUrl: 'app/core/templates/modal/warningModal.html',\r\n                    controller: 'WarningModalController',\r\n                    size: '',\r\n                });\r\n                trigger = true;\r\n            }\r\n            return trigger;\r\n        }\r\n\r\n        /*API Services*/\r\n\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Gets Flight Reservations. \r\n         * @param data an object with three properties: BaseId, StartDateTime, and DurationHours. \r\n         * @return an Http promise that when resolved will give access to reservations in two categories\r\n         * Arrivals and Departures (For ex. {Arrivals: [], Departures: []})\r\n         */\r\n        function getReservationsByBase(data) {\r\n            return HttpRequestService.Go({\r\n                method: \"POST\",\r\n                url: AuthenticationSettings.ResourcesAPI + \"api/FlightBoard/\" + \"GetReservationsByBase\",\r\n                data: JSON.stringify(data)\r\n            });\r\n        }\r\n\r\n        function getUserSettings() {\r\n            return {\r\n                BaseId: \"P08\",\r\n                Roles: []\r\n            };\r\n        }\r\n\r\n\r\n        /*FlightBoard Logic*/\r\n\r\n        function setPaginationCounter(itemsPerPage, dataLength, currentPage) {\r\n            var begin, end;\r\n            begin = (currentPage - 1) * itemsPerPage;\r\n            end = begin + itemsPerPage;\r\n            if ((end - dataLength) > 0) {\r\n                var difference = dataLength - begin;\r\n                end = begin + difference;\r\n            }\r\n            begin += 1;\r\n            return { begin: begin, end: end };\r\n        }\r\n\r\n        function createFlightObject(pageNum, itemsPerPage, hourRange, date) {\r\n            var obj = {\r\n                Pagination: { CurrentPage: pageNum, itemsPerPage: itemsPerPage },\r\n                Date: date,\r\n                HourRange: hourRange\r\n            };\r\n            return obj;\r\n        }\r\n\r\n        function calculateHourRange(arithmetic, hourRange) {\r\n            if (hourRange === 0 && arithmetic == \"s\") {\r\n                return 0;\r\n            }\r\n\r\n            if (arithmetic == \"s\") {\r\n                hourRange -= 1;\r\n            }\r\n\r\n            if (arithmetic == \"a\") {\r\n                hourRange += 1;\r\n            }\r\n\r\n            return hourRange;\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * gets same day, and heavy charter flights \r\n         * formats departure dates and looks for heavy charters\r\n         * removes same day flights and heavy charters from arrival and departure arrays.\r\n         * @param data encapsulates both arrivals and departures\r\n         * @return an object with three properties: sameDayFlights, heavyCharters, and data (Arrivals and Departures)\r\n         */\r\n        function structureReservationData(data) {\r\n            if (HelperMethodsService.IsObjectNull(data)) return;\r\n\r\n            var sameDayFlights = [],\r\n                heavyCharters = [],\r\n                arrivals = data.Arrivals,\r\n                departures = data.Departures;\r\n     \r\n            getFlights(arrivals, sameDayFlights, heavyCharters);\r\n            checkDeparturesForHeavyTransport(departures, heavyCharters);\r\n            removeFlights(arrivals, departures, sameDayFlights, heavyCharters);\r\n\r\n            sortArrivals(arrivals);\r\n            sortSameDayFlights(sameDayFlights);\r\n            sortDepartures(departures);\r\n            sortHeavyCharters(heavyCharters);\r\n\r\n            return { sameDayFlights: sameDayFlights, heavyCharters: heavyCharters, data: data };\r\n        }\r\n\r\n       /**\r\n         * The following four functions are used to initiate the sort methods for \r\n         * the flights. \r\n         */\r\n        function sortArrivals(arrivals) {\r\n            sortFlights(arrivals, self.sections.arrival);\r\n            for (var i in arrivals) {\r\n                formatReservationTimes(arrivals[i], self.flightDirection[0].id);\r\n            }\r\n        }\r\n        \r\n        function sortSameDayFlights(sameDayFlights) {\r\n            sortFlights(sameDayFlights, self.sections.sameDay);\r\n            for (var i in sameDayFlights) {\r\n                formatReservationTimes(sameDayFlights[i]);\r\n            }\r\n        }\r\n        \r\n        function sortDepartures(departures) {\r\n            sortFlights(departures, self.sections.departure);\r\n            for (var i = 0; i < departures.length; i++) {\r\n                formatReservationTimes(departures[i], self.flightDirection[1].id);\r\n           }\r\n        }\r\n\r\n        function sortHeavyCharters(heavyCharters) {\r\n            for (var i = 0; i < heavyCharters.length; i++) {\r\n                if (heavyCharters[i].IsArrival === true) {\r\n                    formatReservationTimes(heavyCharters[i], self.flightDirection[0].id);\r\n                }\r\n                else if(heavyCharters[i].IsDeparture === true) {\r\n                    formatReservationTimes(heavyCharters[i], self.flightDirection[1].id);\r\n                }\r\n                else if (heavyCharters[i].IsSameDay === true) {\r\n                    formatReservationTimes(heavyCharters[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * iterates through the departure array to find heavy transport flights.\r\n         * @param departures array with departure flights\r\n         * @param heavyCharters array with heavy flights \r\n         */\r\n        function checkDeparturesForHeavyTransport(departures, heavyCharters) {\r\n            for (var i = 0; i < departures.length; i++) {             \r\n                if (isHeavyCharter(departures[i])) {\r\n                    departures[i].IsDeparture = true;\r\n                    heavyCharters.push(departures[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function sortFlights(array, section) {\r\n            if (HelperMethodsService.IsObjectNull(array)) return;\r\n\r\n            if (section === self.sections.arrival) {\r\n                array.sort(function (aFlight, bFlight) {\r\n                    var aDateTime;\r\n                    var bDateTime;\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(aFlight.ArrivalFlightInformation.FlightDateTime)) {\r\n                        aDateTime = aFlight.ArrivalFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(aFlight.ArrivalFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(aFlight.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                        aDateTime = aFlight.ArrivalFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(bFlight.ArrivalFlightInformation.FlightDateTime)) {\r\n                        bDateTime = bFlight.ArrivalFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(bFlight.ArrivalFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(bFlight.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                        bDateTime = bFlight.ArrivalFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    return aDateTime > bDateTime ? 1 : -1;\r\n\r\n                });\r\n            }\r\n\r\n            if (section === self.sections.sameDay) {\r\n                array.sort(function (aFlight, bFlight) {\r\n\r\n\r\n                    var aDateTime = sortMethodForSameDayFlights(aFlight);\r\n                    var bDateTime = sortMethodForSameDayFlights(bFlight);\r\n\r\n                    return aDateTime > bDateTime ? 1 : -1;\r\n                });\r\n            }\r\n\r\n            if (section === self.sections.departure) {\r\n                array.sort(function (aFlight, bFlight) {\r\n                    var aDateTime;\r\n                    var bDateTime;\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(aFlight.DepartureFlightInformation.FlightDateTime)) {\r\n                        aDateTime = aFlight.DepartureFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(aFlight.DepartureFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(aFlight.DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                        aDateTime = aFlight.DepartureFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(bFlight.DepartureFlightInformation.FlightDateTime)) {\r\n                        bDateTime = bFlight.DepartureFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(bFlight.DepartureFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(bFlight.DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                        bDateTime = bFlight.DepartureFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    return aDateTime > bDateTime ? 1 : -1;\r\n                });\r\n            }\r\n            return array;\r\n        }\r\n\r\n\r\n        function sortMethodForSameDayFlights(flight) {\r\n            var dateTime;\r\n            var enter = false;\r\n\r\n            if (!HelperMethodsService.IsPropertyEmpty(flight.DepartureFlightInformation.FlightDateTime)) {\r\n                enter = true;\r\n                dateTime = flight.DepartureFlightInformation.FlightDateTime;\r\n            }\r\n            else if (!enter) {\r\n                if ((!HelperMethodsService.IsPropertyEmpty(flight.DepartureFlightInformation.EstimatedFlightDateTime) && !HelperMethodsService.IsPropertyEmpty(flight.ArrivalFlightInformation.FlightDateTime))) {\r\n                    enter = true;\r\n                    dateTime = flight.DepartureFlightInformation.EstimatedFlightDateTime;\r\n                }\r\n\r\n                if (!enter && !HelperMethodsService.IsPropertyEmpty(flight.ArrivalFlightInformation.FlightDateTime)) {\r\n                    enter = true;\r\n                    dateTime = flight.ArrivalFlightInformation.FlightDateTime;\r\n                }\r\n\r\n                if (!enter && !HelperMethodsService.IsPropertyEmpty(flight.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                    enter = true;\r\n                    dateTime = flight.ArrivalFlightInformation.EstimatedFlightDateTime;\r\n                }\r\n            }\r\n\r\n            return dateTime;\r\n\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Flattens the data for arrivals and departures.  \r\n         * @param data encapsulates both arrivals and departures\r\n        */\r\n        function flattenReservation(data) {\r\n            if (HelperMethodsService.IsObjectNull(data)) return;\r\n\r\n            var arrivals = data.Arrivals,\r\n                departures = data.Departures;\r\n\r\n            startFlattenProcess(arrivals);\r\n            startFlattenProcess(departures);\r\n        }\r\n\r\n        /*Private functions */\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Iterates through the arrivals array and finds same day and or heavy transport flights. The arrivals array is the only \r\n         * array that will possibly have same day flights. The dates in the arrival flights and their corresponding departures \r\n         * are formatted accordingly. \r\n         * @param arrivals array with arrival flights filtered by the flightboard calendar date and corresponding departure flights. \r\n         * @param sameDayFlights empty array to hold flights (arrivals and departures) on the same day. \r\n         * @param heavyCharters empty array to hold flights that are considered heavy. \r\n         */\r\n        function getFlights(arrivals, sameDayFlights, heavyCharters) {\r\n\r\n            for (var i = 0; i < arrivals.length; i++) {\r\n                if (!HelperMethodsService.IsObjectNull(arrivals[i].ArrivalFlightInformation) && !HelperMethodsService.IsObjectNull(arrivals[i].DepartureFlightInformation)) {\r\n                    if (DateTimeService.FormatDate(arrivals[i].ArrivalFlightInformation.EstimatedFlightDateTime) == DateTimeService\r\n                        .FormatDate(arrivals[i].DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                        isQuickTurn(arrivals[i]);\r\n                        //  formatReservationTimes(arrivals[i]);\r\n                        if (isHeavyCharter(arrivals[i])) {\r\n                            arrivals[i].IsSameDay = true;\r\n                            heavyCharters.push(arrivals[i]);\r\n                        }\r\n                        else {\r\n                            sameDayFlights.push(arrivals[i]);\r\n                        }\r\n\r\n                        continue;\r\n                    }\r\n                }\r\n                //   formatReservationTimes(arrivals[i], self.flightDirection[0].id);\r\n                if (isHeavyCharter(arrivals[i])) {\r\n                    arrivals[i].IsArrival = true;\r\n                    heavyCharters.push(arrivals[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Checks if the Departure time minus the arrival time is greater than -1 or less than or equal to 30 mins. \r\n         * If the expression is true, the flight is considered a Quick Turn. \r\n         * @param arrival a flight object from the arrivals. \r\n         */\r\n        function isQuickTurn(arrival) {\r\n            arrival.QuickTurn = false;\r\n            if (!HelperMethodsService.IsPropertyEmpty(arrival.ArrivalFlightInformation.FlightDateTime)) { startDate = arrival.ArrivalFlightInformation.FlightDateTime; }\r\n            else { startDate = arrival.ArrivalFlightInformation.EstimatedFlightDateTime; }\r\n            var difference = DateTimeService.GetDifference(startDate, arrival.DepartureFlightInformation.EstimatedFlightDateTime, \"minutes\");\r\n            if (difference > -1 && difference <= 30) { arrival.QuickTurn = true; }\r\n            return arrival;\r\n        }\r\n\r\n        function isHeavyCharter(flight) {\r\n            return ((!HelperMethodsService.IsPropertyEmpty(flight.AircraftType)) && (self.heavyCharterTypes.indexOf(flight.AircraftType.toLowerCase()) > -1));\r\n        }\r\n\r\n        function removeFlights(arrivals, departures, sameDayFlights, heavyCharters) {\r\n            for (var i in sameDayFlights) {\r\n                var index = arrivals.indexOf(sameDayFlights[i]);\r\n                if (index > -1) { arrivals.splice(index, 1); }\r\n            }\r\n\r\n            for (var j in heavyCharters) {\r\n                var arrivalsIndex = arrivals.indexOf(heavyCharters[j]);\r\n                if (arrivalsIndex > -1) { arrivals.splice(arrivalsIndex, 1); }\r\n                var departuresIndex = departures.indexOf(heavyCharters[j]);\r\n                if (departuresIndex > -1) { departures.splice(departuresIndex, 1); }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Checks if the flight object is an arrival or departure and formats the date according to the flight\r\n         * direction id. If the flight direction id is null or undefined then the logic defaults to formatting \r\n         * the date with just the time. \r\n         * @param obj a flight object \r\n         * @param flightDirectionId an id that dictates if the flight object is an arrival or departure flight object. \r\n         */\r\n        function formatReservationTimes(obj, flightDirectionId) {\r\n            if (!HelperMethodsService.IsObjectNull(obj.ArrivalFlightInformation)) {\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.ArrivalFlightInformation.FlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.ArrivalFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.FlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.ArrivalFlightInformation.FlightDateTime = DateTimeService.FormatDate(obj.ArrivalFlightInformation.FlightDateTime); }\r\n                    else { obj.ArrivalFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.FlightDateTime); }\r\n                }\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.ArrivalFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.EstimatedFlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.ArrivalFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatDate(obj.ArrivalFlightInformation.EstimatedFlightDateTime); }\r\n                    else { obj.ArrivalFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.EstimatedFlightDateTime); }\r\n                }\r\n            }\r\n\r\n            if (!HelperMethodsService.IsObjectNull(obj.DepartureFlightInformation)) {\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.DepartureFlightInformation.FlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.DepartureFlightInformation.FlightDateTime = DateTimeService.FormatDate(obj.DepartureFlightInformation.FlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.DepartureFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.FlightDateTime); }\r\n                    else { obj.DepartureFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.FlightDateTime); }\r\n                }\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.DepartureFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatDate(obj.DepartureFlightInformation.EstimatedFlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.DepartureFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.EstimatedFlightDateTime); }\r\n                    else { obj.DepartureFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.EstimatedFlightDateTime); }\r\n                }\r\n            }\r\n        }\r\n\r\n        function startFlattenProcess(data) {\r\n            for (var i in data) {\r\n                flattenGroundTransportation(data[i]);\r\n                flattenAircraftServices(data[i]);\r\n                flattenTransactionPayment(data[i]);\r\n\r\n                if (data[i].CustomsRequiredInbound === false) { data[i].CustomsRequiredInbound = \"\"; }\r\n                else if (data[i].CustomsRequiredInbound === true) { data[i].CustomsRequiredInbound = \"Y\"; }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Checks if there is a valid aircraft service and creates a object with the\r\n         * service and attaches it to the obj param\r\n         * @param obj a flight object\r\n         */\r\n        function flattenAircraftServices(obj) {\r\n            for (var i in obj.AircraftServices) {\r\n\r\n                for (var j in self.serviceCategory) {\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(obj.AircraftServices[i].ServiceCategory) && (obj.AircraftServices[i].ServiceCategory.toLowerCase() == self.serviceCategory[j].name.toLowerCase())) {\r\n\r\n                        if (!HelperMethodsService.IsObjectNull(obj.Fuel) && obj.AircraftServices[i].ServiceCategory.toLowerCase() === \"fuel\") {\r\n                            obj.Fuel.Quantity += obj.AircraftServices[i].Quantity;\r\n                            obj.Fuel.Comments += \", \" + obj.AircraftServices[i].Comments;\r\n                            break;\r\n                        }\r\n\r\n                        obj[self.serviceCategory[j].name] = {};\r\n                        obj[self.serviceCategory[j].name].Active = obj.AircraftServices[i].Active;\r\n                        obj[self.serviceCategory[j].name].AircraftServiceId = obj.AircraftServices[i].AircraftServiceId;\r\n                        obj[self.serviceCategory[j].name].Comments = obj.AircraftServices[i].Comments;\r\n                        obj[self.serviceCategory[j].name].LastUpdatedBy = obj.AircraftServices[i].LastUpdatedBy;\r\n                        obj[self.serviceCategory[j].name].ProductCode = obj.AircraftServices[i].ProductCode;\r\n                        obj[self.serviceCategory[j].name].Quantity = obj.AircraftServices[i].Quantity;\r\n                        obj[self.serviceCategory[j].name].ServiceCategory = obj.AircraftServices[i].ServiceCategory;\r\n                        obj[self.serviceCategory[j].name].ServiceCategoryId = obj.AircraftServices[i].ServiceCategoryId;\r\n                        obj[self.serviceCategory[j].name].Status = obj.AircraftServices[i].Status;\r\n                        obj[self.serviceCategory[j].name].Type = obj.AircraftServices[i].Type;\r\n\r\n                        if (self.serviceCategory[j].name.toLowerCase() == \"fuel\") {\r\n                            //checks for avgas\r\n                            if (!HelperMethodsService.IsPropertyEmpty(obj.AircraftServices[i].ProductDescription) && (obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('avgas') > -1 || obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('100ll') > -1)) {\r\n                                obj[self.serviceCategory[j].name].ProductDescription = \"A\";\r\n                            }\r\n\r\n                            //checks to see if there is prist or fsii\r\n                            if (!HelperMethodsService.IsPropertyEmpty(obj.AircraftServices[i].ProductDescription) && (obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('prist') > -1 || obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('fsii') > -1)) {\r\n                                obj[self.serviceCategory[j].name].ProductDescription = \"JET A +\";\r\n                            }\r\n\r\n                            //if description is still empty then give it a default value. \r\n                            if (HelperMethodsService.IsPropertyEmpty(obj[self.serviceCategory[j].name].ProductDescription)) {\r\n                                obj[self.serviceCategory[j].name].ProductDescription = \"JET A -\";\r\n                            }\r\n                        }\r\n                        else {\r\n                            obj[self.serviceCategory[j].name].ProductDescription = obj.AircraftServices[i].ProductDescription;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * This function does the following: \r\n         * iterates through all of the ground transportation objects of a flight, \r\n         * and when it finds a match in the transportation type array, its sets \r\n         * the value to the AllTransportations in the obj. \r\n         * @param obj a flight object\r\n         */\r\n        function flattenGroundTransportation(obj) {\r\n\r\n            if (HelperMethodsService.IsObjectNull(obj.GroundTransportations)) return;\r\n\r\n            var all = [];\r\n\r\n            for (var i in obj.GroundTransportations) {\r\n                for (var j in self.transportationType) {\r\n                    if (!HelperMethodsService.IsPropertyEmpty(obj.GroundTransportations[i].CarType.Name) && (obj.GroundTransportations[i].CarType.Name.toLowerCase() === self.transportationType[j].type)) {\r\n\r\n                        var nameAbbreviation = self.transportationType[j].abbreviation; // CarType\r\n                        var type = obj.GroundTransportations[i].Type.Name; // Crew or Passenger\r\n\r\n                        if (!HelperMethodsService.IsPropertyEmpty(type) && (type.toLowerCase() == \"passenger\")) { type = \"P\"; }\r\n                        if (!HelperMethodsService.IsPropertyEmpty(type) && (type.toLowerCase() == \"crew\")) { type = \"C\"; }\r\n\r\n                        var fullTransportationLabel = type + \"\" + nameAbbreviation;\r\n\r\n                        all.push({ label: fullTransportationLabel, count: 1 });\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var array = angular.copy(all);\r\n            for (var b in array) {\r\n                var current = array[b];\r\n                for (var c in array) {\r\n                    if (current.label == array[c].label && b !== c && current.flagged !== true) {\r\n                        //found a match, flag the match \r\n                        array[c].flagged = true;\r\n                        current.count += 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            obj.AllTransportations = { Text: \"\", Status: true };\r\n            for (var s in array) {\r\n                if (array[s].flagged !== true) {\r\n                    if (obj.AllTransportations.Text.length > 0) { obj.AllTransportations.Text += \", \"; }\r\n                    obj.AllTransportations.Text += array[s].label + \"(\" + array[s].count + \")\";\r\n                }\r\n            }\r\n        }\r\n\r\n        function flattenTransactionPayment(obj) {\r\n            obj.InvoiceIcon = \"\";\r\n            obj.InvoiceText = \"\";\r\n            var transactionPaymentStatus = [];\r\n\r\n            if (HelperMethodsService.IsPropertyEmpty(obj.PosTransactionId)) return;\r\n\r\n            var array = obj.Payments,\r\n                transactionHeaderStatus = obj.PosTransactionStatus,\r\n                directBillNumber = obj.DirectBillNumber;\r\n\r\n            for (var i in array) {\r\n                transactionPaymentStatus.push(array[i].Status);\r\n            }\r\n\r\n            if (transactionPaymentStatus.indexOf(2) > -1) {\r\n                obj.InvoiceIcon = \"fa fa-usd\";\r\n            }\r\n            else if (((transactionPaymentStatus.indexOf(32) > -1 && transactionHeaderStatus == 1) && transactionPaymentStatus.indexOf(2) === -1) || obj.CardOnFile === true) {\r\n                obj.InvoiceText = \"CS\";\r\n            }\r\n            else if (!HelperMethodsService.IsPropertyEmpty(directBillNumber)) {\r\n                obj.InvoiceIcon = \"fa fa-check\";\r\n            }\r\n            else {\r\n                obj.InvoiceIcon = \"fa fa-asterisk\";\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n\t\t.module('app')\r\n\t\t.controller(\"IndexController\", IndexController);\r\n\r\n    IndexController.$inject = ['$scope'];\r\n\r\n\r\n    function IndexController($scope) {\r\n        var vm = this;\r\n        vm.title = \"Index Controller\";\r\n        $scope.title = \"Index Controller\";\r\n\r\n        vm.httpRequestPromise = undefined;\r\n\r\n        $scope.$on('loadSplashScreen', function (event, args) {\r\n            vm.httpRequestPromise = args.httpPromise;\r\n        });\r\n\r\n        function activate() { }\r\n\r\n        activate();\r\n\r\n    }\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$scope', '$state', 'AuthenticationService'];\r\n\r\n    function LoginController($scope, $state, AuthenticationService, ApplicationInsightsService) {\r\n        var vm = this;\r\n\r\n        vm.title = 'Login Controller';\r\n        vm.loginPromise = undefined;\r\n        vm.displayError = undefined;\r\n        vm.errorMessage = undefined;\r\n\r\n        vm.userCredentails = {};\r\n\r\n        vm.loginUser = loginUser;\r\n\r\n        function loginUser() {\r\n            if (vm.loginForm.$invalid) {\r\n                return;\r\n            }\r\n            vm.displayError = false;\r\n            var userObject = {\r\n                grant_type: \"password\",\r\n                username: vm.userCredentails.username,\r\n                password: vm.userCredentails.password,\r\n            };\r\n\r\n            vm.loginPromise = AuthenticationService.LoginUser(userObject);\r\n\r\n            $scope.$emit('loadSplashScreen', { httpPromise: vm.loginPromise });\r\n\r\n            vm.loginPromise.then(function (data) {\r\n                $state.go('root.appLayout.dashboard');\r\n            }).catch(function (err) {\r\n                ApplicationInsightsService.TrackException(err.error, \"Login\", { userName: userObject.username, errorDescription: err.error_description });                 \r\n                vm.displayError = true;\r\n                if ((err !== null) && err.error === \"ad_error\") {\r\n                    vm.errorMessage = \"You have entered the wrong username or password\";\r\n                }\r\n                else if (err === null || err === undefined) {\r\n                    vm.errorMessage = \"Login Connectivity has been lost\";\r\n                }\r\n                console.log(err);\r\n            });\r\n        }\r\n\r\n        activate();\r\n\r\n        function activate() { }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('LoginService', LoginService);\r\n\r\n    LoginService.$inject = ['HttpRequestService', 'AuthenticationSettings'];\r\n\r\n    function LoginService(HttpRequestService, AuthenticationSettings) {\r\n        return {\r\n            PostLogin: postLogin\r\n        };\r\n\r\n        function postLogin(userObject) {\r\n            return HttpRequestService.Go({\r\n                method: 'POST',\r\n                url: AuthenticationSettings.AuthenticationAPI + 'token',\r\n                data: \"grant_type=password&username=\" + userObject.username + \"&password=\" + userObject.password + \"&aduser=\" + true,\r\n                headers: { 'Content-type': 'application/x-www-form-urlencoded' }\r\n            });\r\n        }\r\n    }\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('SimpleLoginController', SimpleLoginController);\r\n\r\n    SimpleLoginController.$inject = ['$timeout', '$state'];\r\n\r\n    function SimpleLoginController($timeout, $state) {\r\n        var vm = this;\r\n        vm.passcode = []; \r\n        vm.numbers = [\r\n            { id: \"1\", text: \"one\" },\r\n            { id: \"2\", text: \"two\" },\r\n            { id: \"3\", text: \"three\" },\r\n            { id: \"4\", text: \"four\" },\r\n            { id: \"5\", text: \"five\" },\r\n            { id: \"6\", text: \"six\" },\r\n            { id: \"7\", text: \"seven\" },\r\n            { id: \"8\", text: \"eight\" },\r\n            { id: \"9\", text: \"nine\" },\r\n            { id: \"0\", text: \"zero\" },\r\n        ];\r\n        vm.smallCircles = [false, false,false, false, false, false];\r\n\r\n\r\n        vm.ClickedCircle = clickedCircle;\r\n        vm.DeletePasscode = deletePasscode;\r\n\r\n        function clickedCircle(id) {\r\n            vm[id] = true;\r\n            $timeout(function () {\r\n                vm[id] = false; \r\n            }, 200);\r\n          \r\n            saveNumber(id);           \r\n            colorSmallCircle();\r\n            checkPasscodeLength(); \r\n        }\r\n\r\n        function saveNumber(id) {          \r\n            for(var i in vm.numbers) {\r\n                if (vm.numbers[i].text === id) {\r\n                    vm.passcode.push(vm.numbers[i].id);                  \r\n                    break; \r\n                }\r\n            }\r\n        }\r\n\r\n        function colorSmallCircle() {\r\n            var length = vm.passcode.length - 1;\r\n            vm.smallCircles[length] = true;\r\n\r\n        }\r\n\r\n        function loginUser(callback) {\r\n            callback(\"Error\", null);\r\n        }\r\n\r\n        function checkPasscodeLength() {\r\n            if (vm.passcode.length == 6) {\r\n                loginUser(function (err, res) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                        vm.passcode = [];\r\n                        $timeout(function () {\r\n                            for (var i in vm.smallCircles) {\r\n                                vm.smallCircles[i] = false;\r\n                            }\r\n                        }, 300);\r\n                    }\r\n                    \r\n                    if (res) {\r\n                        $state.go(\"root.login\");\r\n                    }\r\n                });           \r\n            }   \r\n        }\r\n\r\n        function deletePasscode() {\r\n            var index = vm.passcode.length - 1;\r\n            vm.smallCircles[index] = false;\r\n            vm.passcode.splice(index, 1); \r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n})(); ","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RootController', RootController);\r\n\r\n    RootController.$inject = [];\r\n\r\n    function RootController() { }\r\n})();\r\n","(function () {\r\n    angular\r\n        .module('app')\r\n        .controller('ReportController', ReportController);\r\n\r\n    ReportController.$inject = ['$window', 'LookupService', 'DateTimeService'];\r\n\r\n    function ReportController($window, LookupService, DateTimeService) {\r\n        var vm = this;\r\n  \r\n        activate();\r\n\r\n        function activate() {}\r\n\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n\tangular\r\n\t\t.module('app')\r\n\t\t.factory('ReportService', ReportService);\r\n\r\n\tReportService.$inject = ['AuthenticationSettings', '$window'];\r\n\r\n\tfunction ReportService(AuthenticationSettings, $window) {\r\n\r\n\t\treturn {\r\n\t\t\tGenerateReservationReport: generateReservationReport\r\n\t\t};\r\n\r\n\t\tfunction generateReservationReport(model) {\r\n\t\t    $window.open(AuthenticationSettings.ResourcesAPI + \"Report/Reservations/\" + model.baseId + \"/\" + model.startDateTime + \"/\" + model.durationHours);\t   \r\n\t\t}\r\n\t}\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .controller('ReservationsReportController', ReservationsReportController);\r\n\r\n    ReservationsReportController.$inject = ['DateTimeService', 'ReportService', 'LookupService', 'CurrentUserService', 'ApplicationInsightsService'];\r\n\r\n    function ReservationsReportController(DateTimeService, ReportService, LookupService, CurrentUserService, ApplicationInsightsService) {\r\n        var vm = this;\r\n\r\n        vm.currentUser = CurrentUserService.GetCurrentUserData('authenticationData');\r\n\r\n        vm.formats = DateTimeService.GetDateFormats();\r\n        vm.format = vm.formats[3];\r\n        vm.dateOptions = DateTimeService.GetDateOptions();\r\n        vm.altInputFormats = DateTimeService.GetAltInputFormats();\r\n        vm.baseId = undefined;\r\n        vm.startDateTime = undefined;\r\n        vm.isOpen = false; \r\n\r\n        vm.ViewReport = viewReport;\r\n        vm.BaseSelected = baseSelected;\r\n        vm.GetBaseId = getBaseId;\r\n        vm.Open = open;\r\n        vm.Reset = reset;\r\n\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            LookupService.FormatBases(function (err, res) {\r\n                if (err) {\r\n                    ApplicationInsightsService.TrackException(err.message, \"GET CPA BASES (ReservationsReport)\", { userName: vm.currentUser.userName, errorObject: err });                 \r\n                    console.log(err);\r\n                    return;\r\n                }\r\n                vm.bases = res;\r\n                ApplicationInsightsService.TrackEvent(\"Status: 200, Action: GET CPA BASES, handled: ReservationReport\");\r\n            });\r\n\r\n           vm.startDateTime = new Date();\r\n        }\r\n\r\n        function viewReport() {\r\n            if (!getBaseId() || !vm.startDateTime) {\r\n                vm.submit = true;\r\n                return;\r\n            }\r\n            var model = {\r\n                baseId: getBaseId(),\r\n                startDateTime: DateTimeService.FormatDateYear(vm.startDateTime),\r\n                durationHours: 24\r\n            };\r\n            ReportService.GenerateReservationReport(model);\r\n        }\r\n\r\n        function open() {\r\n            vm.isOpen = !vm.isOpen; \r\n        }\r\n\r\n        function baseSelected(item, model, label) {\r\n            setBaseId(model.BaseId);\r\n        }\r\n\r\n        function setBaseId(id) {\r\n            vm.baseId = id;\r\n        }\r\n\r\n        function getBaseId() {\r\n            return vm.baseId;\r\n        }\r\n\r\n        function reset() {\r\n            if (vm.selected === undefined) {\r\n                 vm.baseId = undefined; \r\n            }\r\n        }      \r\n    }\r\n\r\n})();"]}