{"version":3,"sources":["app.js","focusMe.directive.js","myPagination.directive.js","reservationGrid.js","authentication.service.js","authenticationInterceptor.service.js","authenticationSettings.constant.js","currentUser.service.js","datetime.service.js","httpRequest.service.js","lookup.service.js","helperMethods.service.js","startup.js","warningModal.controller.js","state.js","appLayout.controller.js","dashboard.controller.js","flightBoard.controller.js","flightBoard.service.js","index.controller.js","login.controller.js","login.service.js","simpleLogin.controller.js","root.controller.js","report.controller.js","report.service.js","reservationsReport.controller.js"],"names":["angular","module","focusMe","$timeout","scope","focus","link","element","$watch","value","directive","$inject","myPagination","FlightBoardService","myController","pageChanged","vm","currentPage","console","log","ampersand","size","counter","SetPaginationCounter","itemsPerPage","begin","end","activate","this","PageChanged","restrict","controller","controllerAs","bindToController","templateUrl","reservationGrid","reservations","AuthenticationService","LoginService","localStorageService","loginUser","userObject","loginPromise","PostLogin","then","data","setAuthenticationData","accessToken","access_token","userName","UserName","accessTokenExpires","getLocalDataStorage","key","get","logOut","i","self","dataInStorage","clearAuthenticationData","set","remove","service","LoginUser","GetLocalDataStorage","LogOut","factory","AuthenticationInterceptorService","$q","$injector","$window","_request","config","headers","authenticationData","Authorization","request","constant","AuthenticationAPI","ResourcesAPI","CurrentUserService","setConfiguration","obj","ConfigKey","getConfiguration","getCurrentUserData","GetConfiguration","SetConfiguration","GetCurrentUserData","DateTimeService","addHoursToTodaysDateTime","numberOfHours","moment","add","hourSymbol","format","dateTimeFormat","getTimeFromDateTime","datetime","momentDate","timeFormat","formatDate","date","dateFormat","formatDateTime","formatTime","setHoursToDate","hours","arithmetic","subtract","getTodaysDate","getTodaysTime","getDateFormats","dateFormats","getDateOptions","dateOptions","getAltInputFormats","altInputFormats","getDateParts","d","dateParts","year","day","month","getDifference","start","measurement","startDate","endDate","diff","formatDateYear","formatMomentDateYear","formatYear","startingDay","showWeeks","AddHoursToTodaysDateTime","SetHoursToDate","FormatDate","FormatDateTime","FormatTime","FormatDateYear","FormatMomentDateYear","GetTimeFromDateTime","GetTodaysDate","GetTodaysTime","GetDateFormats","GetDateOptions","GetAltInputFormats","GetDateParts","GetDifference","HttpRequestService","$http","Go","httpConfiguration","deferred","defer","success","status","resolve","error","reject","promise","LookupService","AuthenticationSettings","formatBases","callback","method","url","push","BaseId","Iata","err","basePromise","undefined","FormatBases","HelperMethodsService","isObjectNull","length","isPropertyEmpty","trim","IsObjectNull","IsPropertyEmpty","authenticationInterceptor","$httpProvider","interceptors","runBlock","$rootScope","$state","$on","event","toState","toParams","fromState","fromParams","userAuthentication","loginRoute","simpleLogin","root","name","preventDefault","go","TriggerModal","run","message","WarningModalController","$scope","$uibModalInstance","ok","dismiss","mainState","$stateProvider","$urlRouterProvider","state","views","rootLayout","AppLayoutController","$location","$uibModal","setUp","path","open","isSideNavClosed","args","close","navigateTo","route","title","Logout","Open","NavigateTo","DashboardController","FlightBoardController","$interval","ApplicationInsightsService","setUpDateTime","flightBoardConfiguration","GetFlightBoardConfiguration","getReservationsByBase","$emit","getReservationsIntervalPromise","getTodaysTimeIntervalPromise","todaysTime","isDefined","cancel","flightBoardDate","calendarDate","Date","baseId","requestObject","getRequestObject","reservationsPromise","GetReservationsByBase","FlattenReservation","collection","StructureReservationData","arrivals","Arrivals","departures","Departures","sameDayFlights","heavyCharters","TrackException","currentUser","errorObject","StartDateTime","getFlightBoardDate","DurationHours","hourRange","fetchReservations","partOfDate","openFlightBoardCalendar","isFlightBoardCalendarOpen","dateChanged","setFlightBoardDate","transports","FetchReservations","OpenFlightBoardCalendar","DateChanged","formats","triggerModal","trigger","flightBoardRoute","animation","JSON","stringify","getUserSettings","Roles","structureReservationData","getFlights","checkDeparturesForHeavyTransport","removeFlights","sortArrivals","sortSameDayFlights","sortDepartures","sortHeavyCharters","sortFlights","sections","arrival","formatReservationTimes","flightDirection","id","sameDay","departure","IsArrival","IsDeparture","IsSameDay","isHeavyCharter","array","section","sort","aFlight","bFlight","aDateTime","bDateTime","ArrivalFlightInformation","FlightDateTime","EstimatedFlightDateTime","sortMethodForSameDayFlights","DepartureFlightInformation","flight","dateTime","enter","flattenReservation","startFlattenProcess","isQuickTurn","QuickTurn","difference","AircraftType","heavyCharterTypes","indexOf","toLowerCase","index","splice","j","arrivalsIndex","departuresIndex","flightDirectionId","flattenGroundTransportation","flattenAircraftServices","flattenTransactionPayment","CustomsRequiredInbound","AircraftServices","serviceCategory","ServiceCategory","Fuel","Quantity","Comments","Active","AircraftServiceId","LastUpdatedBy","ProductCode","ServiceCategoryId","Status","Type","ProductDescription","GroundTransportations","all","transportationType","CarType","Name","type","nameAbbreviation","abbreviation","fullTransportationLabel","label","count","copy","b","current","c","flagged","AllTransportations","Text","s","InvoiceIcon","InvoiceText","transactionPaymentStatus","PosTransactionId","Payments","transactionHeaderStatus","PosTransactionStatus","directBillNumber","DirectBillNumber","CardOnFile","Id","prefix","fuelTypes","GetUserSettings","IsQuickTurn","SortFlights","IsHeavyCharter","RemoveFlights","GetFlights","CheckDeparturesForHeavyTransport","IndexController","httpRequestPromise","httpPromise","LoginController","loginForm","$invalid","displayError","grant_type","username","userCredentails","password","errorMessage","postLogin","user","email","Content-type","SimpleLoginController","clickedCircle","saveNumber","colorSmallCircle","checkPasscodeLength","numbers","text","passcode","smallCircles","res","deletePasscode","ClickedCircle","DeletePasscode","RootController","ReportController","ReportService","generateReservationReport","model","startDateTime","durationHours","GenerateReservationReport","ReservationsReportController","bases","TrackEvent","viewReport","getBaseId","submit","isOpen","baseSelected","item","setBaseId","reset","selected","ViewReport","BaseSelected","GetBaseId","Reset"],"mappings":"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","file":"../allminified.min.js","sourcesContent":["(function () {\r\n    'use strict';\n\n    angular.module('app', [\n        // Angular modules\n        'ngAnimate',\n        'angular-loading-bar',\n\n        // Custom modules\n\n        // 3rd Party Modules\n         'ui.bootstrap',\n         'ui.router',\n         'LocalStorageModule',\n         'cgBusy'\n    ]);\r\n})();\n","(function () {\r\n    angular\r\n        .module('app')\r\n        .directive('focusMe', focusMe);\r\n\r\n    focusMe.$inject = ['$timeout'];\r\n\r\n    function focusMe($timeout) {\r\n        return {\r\n            scope: { focus: '=focusMe' },\r\n            link: function (scope, element) {\r\n                scope.$watch('focus', function (value) {\r\n                    if (value === true) {\r\n                        $timeout(function () {\r\n                            element[0].focus();\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n})();","/*Still Implementing not ready for production*/\r\n(function () {\r\n    angular\r\n        .module('app')\r\n        .directive(\"myPagination\", myPagination);\r\n\r\n    myPagination.$inject = [\"FlightBoardService\"];\r\n\r\n\r\n    function myPagination(FlightBoardService) {\r\n        return {\r\n            restrict: 'EA', // E = element, A= Attribute\r\n            scope: { itemsPerPage: \"=\", size: \"=\", currentPage: \"=\", ampersand: \"&\" },\r\n            controller: myController,\r\n            controllerAs: 'vm',\r\n            bindToController: true,\r\n            templateUrl: 'app/core/templates/myPagination.html',\r\n        };\r\n\r\n\r\n        function myController() {\r\n            var vm = this;\r\n            vm.PageChanged = pageChanged;\r\n\r\n            function pageChanged() {\r\n                //TODO: Needs to call data source here, then update the counter. \r\n\r\n\r\n                if (vm.currentPage > 1) {\r\n                    console.log(\"enter here first\");\r\n                    vm.ampersand({ currentPage: vm.currentPage });\r\n                }\r\n                console.log(vm.currentPage);\r\n                console.log(vm.size);\r\n                console.log(\"directive continues down the code\");\r\n                var counter = FlightBoardService.SetPaginationCounter(vm.itemsPerPage, vm.size, vm.currentPage);\r\n                vm.begin = counter.begin;\r\n                vm.end = counter.end;\r\n\r\n            }\r\n\r\n            activate();\r\n            function activate() {\r\n                //Intialize the counter values\r\n                pageChanged();\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\r\n/*Usage:\r\n        <my-pagination items-per-page=\"vm.itemsPerPage\" size=\"vm.departureData.length\" current-page=\"vm.currentPage\" ampersand=\"vm.FetchDepartureData(currentPage)\"></my-pagination>\r\n        <div class=\"col-sm-12\" style=\"padding-top: 0px\">\r\n            <uib-pagination class=\"pull-right\" total-items=\"vm.totalItems\" ng-model=\"vm.currentPage\" ng-change=\"vm.PageChanged()\"></uib-pagination>\r\n        </div>\r\n\r\n Parent Controller: \r\n    function fetchDepartureData(currentPage) {\r\n    vm.departureData = [{ prop: 1 }, { prop: 1 }, { prop: 1 }];\r\n}\r\n\r\n*/","(function () {\r\n    angular\r\n        .module('app')\r\n        .directive(\"reservationGrid\", reservationGrid);\r\n\r\n    reservationGrid.$inject = [];\r\n\r\n\r\n    function reservationGrid() {\r\n        return {\r\n            restrict: 'EA', // E = element, A= Attribute\r\n            scope: { reservations: \"=\" },\r\n            bindToController: true,\r\n            templateUrl: 'app/core/templates/reservation.html',\r\n            controller: myController,\r\n            controllerAs: 'vm',\r\n        };\r\n\r\n        function myController() { }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('AuthenticationService', AuthenticationService);\r\n\r\n    AuthenticationService.$inject = ['LoginService', 'localStorageService'];\r\n\r\n    function AuthenticationService(LoginService, localStorageService) {\r\n        var self = this;\r\n        self.dataInStorage = ['authenticationData', 'Configuration'];\r\n\r\n        var service = {\r\n            LoginUser: loginUser,\r\n            GetLocalDataStorage: getLocalDataStorage,\r\n            LogOut: logOut\r\n        };\r\n\r\n        return service;\r\n\r\n        function loginUser(userObject) {\r\n            var loginPromise = LoginService.PostLogin(userObject);\r\n            loginPromise.then(function (data) {\r\n                setAuthenticationData('authenticationData', {\r\n                    accessToken: data.access_token,\r\n                    userName: data.UserName,\r\n                    accessTokenExpires: data[\".expires\"]\r\n                });\r\n            });\r\n\r\n            return loginPromise;\r\n        }\r\n\r\n        function getLocalDataStorage(key) {\r\n            return localStorageService.get(key);\r\n        }\r\n\r\n        function logOut(key) {\r\n            for (var i in self.dataInStorage) {\r\n                clearAuthenticationData(self.dataInStorage[i]);\r\n            }\r\n        }\r\n\r\n\r\n        function setAuthenticationData(key, value) {\r\n            localStorageService.set(key, value);\r\n        }\r\n\r\n        function clearAuthenticationData(key) {\r\n            return localStorageService.remove(key);\r\n        }\r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('AuthenticationInterceptorService', AuthenticationInterceptorService);\r\n\r\n    AuthenticationInterceptorService.$inject = ['$q', '$injector', '$window', '$timeout', 'localStorageService'];\r\n\r\n    function AuthenticationInterceptorService($q, $injector, $window, $timeout, localStorageService) {\r\n        return {\r\n            request: _request,\r\n        };\r\n\r\n        function _request(config) {\r\n            config.headers = config.headers || {};\r\n\r\n            var authenticationData = localStorageService.get('authenticationData');\r\n        \r\n            if (authenticationData) {\r\n                config.headers.Authorization = 'Bearer ' + authenticationData.accessToken;\r\n            }\r\n\r\n            return config;\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .constant(\"AuthenticationSettings\", {\r\n            AuthenticationAPI: 'https://resourceserver.herokuapp.com/login/',\r\n            ResourcesAPI: 'https://resourceserver.herokuapp.com/login/'\r\n        });\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('CurrentUserService', CurrentUserService);\r\n\r\n    CurrentUserService.$inject = ['localStorageService', 'AuthenticationService'];\r\n\r\n    function CurrentUserService(localStorageService, AuthenticationService) {\r\n        var self = this;\r\n        self.ConfigKey = 'Configuration';\r\n\r\n        return {\r\n            GetConfiguration: getConfiguration,\r\n            SetConfiguration: setConfiguration,\r\n            GetCurrentUserData: getCurrentUserData\r\n\r\n        };\r\n\r\n        function setConfiguration(obj) {\r\n            localStorageService.set(self.ConfigKey, obj);\r\n        }\r\n\r\n        function getConfiguration() {\r\n            return localStorageService.get(self.ConfigKey);\r\n        }\r\n\r\n        function getCurrentUserData() {\r\n            return AuthenticationService.GetLocalDataStorage(\"authenticationData\");\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory(\"DateTimeService\", DateTimeService);\r\n\r\n    DateTimeService.$inject = [];\r\n\r\n    function DateTimeService() {\r\n        var self = this;\r\n        self.date = new moment();\r\n        self.dateFormat = \"M/DD/YYYY\";\r\n        self.dateTimeFormat = \"M/DD/YYYY HH:mm\";\r\n        self.timeFormat = \"HH:mm\";\r\n        self.hourSymbol = \"h\";\r\n        self.dateFormats = ['dd-MMMM-yyyy', 'YYYY-MM-DD', 'dd.MM.yyyy', 'MM/dd/yyyy', 'shortDate'];\r\n        self.dateOptions = { formatYear: 'yy', startingDay: 1, showWeeks: true };\r\n        self.altInputFormats = ['M!/d!/yyyy'];\r\n\r\n        var service = {\r\n            AddHoursToTodaysDateTime: addHoursToTodaysDateTime,\r\n            SetHoursToDate: setHoursToDate,\r\n            FormatDate: formatDate,\r\n            FormatDateTime: formatDateTime,\r\n            FormatTime: formatTime,\r\n            FormatDateYear: formatDateYear,\r\n            FormatMomentDateYear: formatMomentDateYear,\r\n            GetTimeFromDateTime: getTimeFromDateTime,\r\n            GetTodaysDate: getTodaysDate,\r\n            GetTodaysTime: getTodaysTime,\r\n            GetDateFormats: getDateFormats,\r\n            GetDateOptions: getDateOptions,\r\n            GetAltInputFormats: getAltInputFormats,\r\n            GetDateParts: getDateParts,\r\n            GetDifference: getDifference\r\n        };\r\n\r\n        return service;\r\n\r\n        function addHoursToTodaysDateTime(numberOfHours) {\r\n            return moment().add(numberOfHours, self.hourSymbol).format(self.dateTimeFormat);\r\n        }\r\n\r\n        function addHoursToDateTime(numberOfHours, datetime) {\r\n            return datetime.add(numberOfHours, self.hourSymbol).format(self.dateTimeFormat);\r\n        }\r\n\r\n        function getTimeFromDateTime(datetime) {\r\n            var momentDate = moment(datetime);\r\n            return momentDate.format(self.timeFormat);\r\n        }\r\n\r\n        function formatDate(date) {\r\n            return moment(date).format(self.dateFormat);\r\n        }\r\n\r\n        function formatDateTime(datetime) {\r\n            return moment(datetime).format(self.dateTimeFormat);\r\n        }\r\n\r\n        function formatTime(date) {\r\n            return moment(date).format(self.timeFormat);\r\n        }\r\n\r\n        function setHoursToDate(date, hours, arithmetic) {\r\n            switch (arithmetic) {\r\n                case 'a':\r\n                    return moment(date, self.dateFormat).add(hours, self.hourSymbol).format(self.dateFormat);\r\n                case 's':\r\n                    return moment(date, self.dateFormat).subtract(hours, self.hourSymbol).format(self.dateFormat);\r\n            }\r\n        }\r\n\r\n        function getTodaysDate() {\r\n            return moment().format(self.dateFormat);\r\n        }\r\n\r\n        function getTodaysTime() {\r\n            return moment().format(self.timeFormat);\r\n        }\r\n\r\n        function getTodaysDateTime() {\r\n            return moment().format(self.dateTimeFormat);\r\n        }\r\n\r\n        function getDateFormats() {\r\n            return self.dateFormats;\r\n        }\r\n\r\n        function getDateOptions() {\r\n            return self.dateOptions;\r\n        }\r\n\r\n        function getAltInputFormats() {\r\n            return self.altInputFormats;\r\n        }\r\n\r\n        function getDateParts(date) {\r\n            var d = moment(date, self.dateFormat);\r\n            var dateParts = { year: d.year(), day: d.date(), month: d.month() };\r\n            return dateParts;\r\n        }\r\n\r\n        function getDifference(start, end, measurement) {\r\n            var startDate = moment(start);\r\n            var endDate = moment(end);\r\n            return endDate.diff(startDate, measurement);\r\n        }\r\n\r\n        function formatDateYear(date) {\r\n            return moment(date).format(self.dateFormats[1]); \r\n        }\r\n\r\n        function formatMomentDateYear() {\r\n            return moment().format(self.dateFormats[1]); \r\n        }\r\n\r\n\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('HttpRequestService', HttpRequestService);\r\n\r\n    HttpRequestService.$inject = ['$q', '$http'];\r\n\r\n    function HttpRequestService($q, $http) {\r\n        return {\r\n            Go: Go\r\n        };\r\n\r\n        function Go(httpConfiguration) {\r\n            var deferred = $q.defer();\r\n            $http(httpConfiguration).success(function (data, status, headers, config) {\r\n                deferred.resolve(data);\r\n            }).error(function (data, status, headers, config) {\r\n                deferred.reject(data);\r\n            });\r\n            return deferred.promise;\r\n        }\r\n    }\r\n\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('LookupService', LookupService);\r\n\r\n    LookupService.$inject = ['HttpRequestService', 'AuthenticationSettings'];\r\n\r\n    function LookupService(HttpRequestService, AuthenticationSettings) {\r\n        var self = this;\r\n        self.basePromise = undefined;\r\n\r\n        return {\r\n            FormatBases: formatBases\r\n        };\r\n\r\n        /*API Services*/\r\n\r\n        function formatBases(callback) {\r\n            HttpRequestService.Go({\r\n                method: 'GET',\r\n                url: AuthenticationSettings.ResourcesAPI + \"api/Lookup/\" + \"GetCpaBases\"\r\n            }).then(function (data) {\r\n                var format = [];\r\n                for (var i in data) {\r\n                    format.push({ BaseId: data[i].BaseId, Iata: data[i].Iata });\r\n                }\r\n                callback(null, format);\r\n            }).catch(function (err) {\r\n                callback(err, null);\r\n            }); \r\n        }\r\n    }\r\n\r\n})();\r\n","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('HelperMethodsService', HelperMethodsService);\r\n\r\n    HelperMethodsService.$inject = [];\r\n\r\n    function HelperMethodsService() {\r\n\r\n        return {\r\n            IsObjectNull: isObjectNull,\r\n            IsPropertyEmpty: isPropertyEmpty\r\n        };\r\n\r\n        function isObjectNull(obj) {\r\n            return (obj === null || obj === undefined || obj.length === 0);\r\n        }\r\n\r\n        function isPropertyEmpty(value) {\r\n            return ((value === null || value === undefined) || (value.trim().length === 0));\r\n        }\r\n    }\r\n\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(authenticationInterceptor); \r\n        \r\n    authenticationInterceptor.$inject = ['$httpProvider'];\r\n\r\n    function authenticationInterceptor($httpProvider) {\r\n        $httpProvider.interceptors.push('AuthenticationInterceptorService');\r\n    }\r\n})(); \r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .run(runBlock);\r\n\r\n    runBlock.$inject = ['$rootScope', '$state', '$timeout', 'AuthenticationService', 'FlightBoardService'];\r\n\r\n    function runBlock($rootScope, $state, $timeout, AuthenticationService, FlightBoardService) {\r\n        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {\r\n\r\n            var userAuthentication = AuthenticationService.GetLocalDataStorage(\"authenticationData\");\r\n            var loginRoute = 'root.login';\r\n            var simpleLogin = 'root.simpleLogin';\r\n            var root = \"root\";\r\n\r\n            //if user is not authenticated, and is routing to the login page then there is no need to route user. \r\n            if (!userAuthentication && (toState.name == loginRoute)) {\r\n                return;\r\n            }\r\n\r\n            //if user is authenticated then he should not be able to visit login page\r\n            if (userAuthentication && (toState.name == loginRoute)) {\r\n                event.preventDefault();\r\n                $timeout(function () {\r\n                    $state.go('root.appLayout.dashboard');\r\n                });\r\n            }\r\n\r\n            //If user is not authenticated, return user to the login view. \r\n            if (!userAuthentication && simpleLogin !== toState.name) {\r\n                event.preventDefault();\r\n                $timeout(function () {\r\n                    $state.go('root.login');\r\n                });\r\n            }\r\n\r\n            //if user is authenticated and starting the app. \r\n            if (userAuthentication && toState.name == root) {\r\n                $timeout(function () {\r\n                    $state.go('root.appLayout.dashboard');\r\n                });\r\n            }\r\n\r\n            if (userAuthentication && toState.name == 'root.appLayout.flightBoard' && (FlightBoardService.TriggerModal('root.appLayout.flightBoard'))) {\r\n                event.preventDefault();\r\n                $timeout(function () {\r\n                    if (fromState.name !== 'root.appLayout.flightBoard') {\r\n                        $state.go('root.appLayout.dashboard');\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n})();\r\n\r\n\r\n/*Configuring angular-busy*/\r\nangular.module('app').value('cgBusyDefaults', {\r\n    message: '',\r\n    templateUrl: 'app/core/templates/customSplashScreen.html'\r\n});","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('WarningModalController', WarningModalController);\r\n\r\n    WarningModalController.$inject = ['$scope', '$uibModalInstance'];\r\n\r\n    function WarningModalController($scope, $uibModalInstance) {\r\n        /* jshint validthis:true */\r\n\r\n        $scope.ok = function () {\r\n            $uibModalInstance.dismiss('');\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .config(mainState);\r\n\r\n    mainState.$inject = ['$stateProvider', '$urlRouterProvider'];\r\n\r\n    function mainState($stateProvider, $urlRouterProvider) {\r\n\r\n        $stateProvider.state('root', {\r\n            url: '',\r\n            views: {\r\n                'rootLayout': {\r\n                    templateUrl: 'app/main/rootLayout/rootLayout.html'\r\n                }\r\n            }\r\n        })\r\n        .state('root.login', {\r\n            url: '/login',\r\n            templateUrl: 'app/main/login/login.html',\r\n            controller: 'LoginController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.simpleLogin', {\r\n            url: '/simplelogin',\r\n            templateUrl: 'app/main/simpleLogin/simpleLogin.html',\r\n            controller: 'SimpleLoginController',\r\n            controllerAs: \"vm\"\r\n        })\r\n        .state('root.appLayout', {\r\n            url: '/app',\r\n            templateUrl: 'app/main/application/appLayout.html',\r\n            controller: 'AppLayoutController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.dashboard', {\r\n            url: '/dashboard',\r\n            templateUrl: 'app/main/dashboard/dashboard.html',\r\n            controller: 'DashboardController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.flightBoard', {\r\n            url: '/flightboard',\r\n            templateUrl: 'app/main/flightBoard/flightBoard.html',\r\n            controller: 'FlightBoardController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.report', {\r\n            url: '/report',\r\n            templateUrl: 'app/main/report/report.html',\r\n            controller: 'ReportController',\r\n            controllerAs: 'vm'\r\n        })\r\n        .state('root.appLayout.report.reservations', {\r\n            url: '/reservationsreport',\r\n            templateUrl: 'app/main/report/reservations/reservations.html',\r\n            controller: 'ReservationsReportController',\r\n            controllerAs: 'vm'\r\n        });\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('AppLayoutController', AppLayoutController);\r\n\r\n    AppLayoutController.$inject = ['$scope', '$state', '$location', '$uibModal', 'AuthenticationService', 'CurrentUserService', 'FlightBoardService'];\r\n\r\n    function AppLayoutController($scope, $state, $location, $uibModal, AuthenticationService, CurrentUserService, FlightBoardService) {\r\n        /* jshint validthis:true */\r\n        var vm = this;\r\n        vm.isSideNavClosed = false;\r\n        vm.state = $state;\r\n\r\n        vm.userName = AuthenticationService.GetLocalDataStorage('authenticationData').userName;\r\n        vm.title = 'AppLayout Controller';\r\n\r\n        vm.Logout = logOut;\r\n        vm.Open = open;\r\n        vm.NavigateTo = navigateTo;\r\n        activate();\r\n\r\n        function activate() {\r\n            setUp();\r\n        }\r\n\r\n        function logOut() {\r\n            AuthenticationService.LogOut();\r\n            $location.path('/login');\r\n        }\r\n\r\n        function open() {\r\n            vm.isSideNavClosed = !vm.isSideNavClosed;\r\n        }\r\n\r\n        function setUp() {\r\n            $scope.$on('toggleSideNav', function (event, args) {\r\n                vm.isSideNavClosed = args.close;\r\n            });\r\n        }\r\n\r\n\r\n        function navigateTo(route) {\r\n            $state.go(route);\r\n        }\r\n\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('DashboardController', DashboardController);\r\n\r\n    DashboardController.$inject = ['$scope', '$state', 'LookupService', 'CurrentUserService', 'DateTimeService'];\r\n\r\n    function DashboardController($scope, $state, LookupService, CurrentUserService, DateTimeService) {\r\n        /* jshint validthis:true */\r\n        var vm = this;\r\n        vm.title = 'Dashboard Controller';\r\n        activate();\r\n\r\n        function activate() {\r\n\r\n        }\r\n\r\n        function navigateTo(route) {\r\n            if (route) {\r\n                $state.go(route);\r\n            }\r\n        }\r\n\r\n        function baseSelected(item, model, label) {\r\n\r\n        }\r\n\r\n        function setUp() {\r\n            $scope.$on('loadSplashScreen', function (event, args) {\r\n                vm.httpRequestPromise = args.httpPromise;\r\n            });\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('FlightBoardController', FlightBoardController);\r\n\r\n    FlightBoardController.$inject = ['$scope', '$interval', 'FlightBoardService', 'DateTimeService', 'CurrentUserService', 'ApplicationInsightsService'];\r\n\r\n    function FlightBoardController($scope, $interval, FlightBoardService, DateTimeService, CurrentUserService, ApplicationInsightsService) {\r\n        var vm = this;\r\n        vm.title = \"FlightBoard Controller\";\r\n        vm.arrivals = [];\r\n        vm.departures = [];\r\n        vm.transports = [];\r\n        vm.sameDayFlights = [];\r\n        vm.hourRange = 24;\r\n        vm.flightBoardConfiguration = {};\r\n        vm.currentUser = CurrentUserService.GetCurrentUserData('authenticationData');\r\n\r\n        vm.flightBoardDate = undefined;\r\n        vm.calendarDate = undefined;\r\n        vm.todaysTime = undefined;\r\n\r\n        vm.FetchReservations = fetchReservations;\r\n        vm.OpenFlightBoardCalendar = openFlightBoardCalendar;\r\n        vm.DateChanged = dateChanged;\r\n        vm.GetReservationsByBase = getReservationsByBase;\r\n\r\n        /* Common Date Configurations*/\r\n        vm.isFlightBoardCalendarOpen = false;\r\n        vm.formats = DateTimeService.GetDateFormats();\r\n        vm.format = vm.formats[3];\r\n        vm.dateOptions = DateTimeService.GetDateOptions();\r\n        vm.altInputFormats = DateTimeService.GetAltInputFormats();\r\n\r\n        activate();\r\n        function activate() {\r\n            setUp();\r\n            setUpDateTime();\r\n            vm.flightBoardConfiguration = CurrentUserService.GetFlightBoardConfiguration();\r\n            getReservationsByBase();\r\n        }\r\n\r\n        function setUp() {\r\n            $scope.$emit('toggleSideNav', { close: true });\r\n\r\n            vm.getReservationsIntervalPromise = $interval(function () { getReservationsByBase(); }, 30000);\r\n            vm.getTodaysTimeIntervalPromise = $interval(function () { vm.todaysTime = DateTimeService.GetTodaysTime(); }, 10000);\r\n\r\n            $scope.$on('$destroy', function () {\r\n                if (angular.isDefined(vm.getReservationsIntervalPromise)) {\r\n                    $interval.cancel(vm.getReservationsIntervalPromise);\r\n                }\r\n\r\n                if (angular.isDefined(vm.getTodaysTimeIntervalPromise)) {\r\n                    $interval.cancel(vm.getTodaysTimeIntervalPromise);\r\n                }\r\n            });\r\n        }\r\n\r\n        function setUpDateTime() {\r\n            vm.flightBoardDate = DateTimeService.GetTodaysDate();\r\n            vm.calendarDate = new Date();\r\n            vm.todaysTime = DateTimeService.GetTodaysTime();\r\n        }\r\n\r\n        function getReservationsByBase(baseId) {\r\n            vm.requestObject = getRequestObject(baseId);\r\n            vm.reservationsPromise = FlightBoardService.GetReservationsByBase(vm.requestObject);\r\n            vm.reservationsPromise.then(function (data) {\r\n\r\n                FlightBoardService.FlattenReservation(data);\r\n                var collection = FlightBoardService.StructureReservationData(data);\r\n\r\n                vm.arrivals = collection.data.Arrivals;\r\n                vm.departures = collection.data.Departures;\r\n                vm.sameDayFlights = collection.sameDayFlights;\r\n                vm.heavyCharters = collection.heavyCharters;\r\n\r\n                console.log(collection);\r\n\r\n            }).catch(function (err) {\r\n                ApplicationInsightsService.TrackException(err.message, \"GetReservationsByBase (FlightBoard)\", { userName: vm.currentUser.userName, errorObject: err });\r\n                console.log(err);\r\n            });\r\n        }\r\n\r\n        function getRequestObject(baseId) {\r\n            return {\r\n                BaseId: (vm.flightBoardConfiguration === null) ? baseId : vm.flightBoardConfiguration.BaseId,\r\n                StartDateTime: getFlightBoardDate(),\r\n                DurationHours: vm.hourRange\r\n            };\r\n        }\r\n\r\n        function fetchReservations(arithmetic) {\r\n            vm.flightBoardDate = DateTimeService.SetHoursToDate(getFlightBoardDate(), vm.hourRange, arithmetic);\r\n            var partOfDate = DateTimeService.GetDateParts(vm.flightBoardDate);\r\n            vm.calendarDate = new Date(partOfDate.year, partOfDate.month, partOfDate.day);\r\n            getReservationsByBase();\r\n        }\r\n\r\n        function openFlightBoardCalendar() {\r\n            vm.isFlightBoardCalendarOpen = !vm.isFlightBoardCalendarOpen;\r\n        }\r\n\r\n        function dateChanged() {\r\n            setFlightBoardDate(DateTimeService.FormatDate(vm.calendarDate));\r\n            getReservationsByBase();\r\n        }\r\n\r\n        function setFlightBoardDate(date) {\r\n            vm.flightBoardDate = date;\r\n        }\r\n\r\n        function getFlightBoardDate() {\r\n            return vm.flightBoardDate;\r\n        }\r\n\r\n        function loadSplashScreen(promise) {\r\n            $scope.$emit('loadSplashScreen', { httpPromise: promise });\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .factory('FlightBoardService', FlightBoardService);\r\n\r\n    FlightBoardService.$inject = ['$interval', '$uibModal', 'HttpRequestService', 'AuthenticationSettings', 'DateTimeService', 'HelperMethodsService', 'CurrentUserService'];\r\n\r\n    function FlightBoardService($interval, $uibModal, HttpRequestService, AuthenticationSettings, DateTimeService, HelperMethodsService, CurrentUserService) {\r\n        var self = this;\r\n\r\n        self.serviceCategory = [\r\n            { Id: 1, name: 'Car' },\r\n            { Id: 2, name: 'Cater' },\r\n            { Id: 3, name: 'CustHandling' },\r\n            { Id: 4, name: 'Deice' },\r\n            { Id: 5, name: 'Etc' },\r\n            { Id: 6, name: 'Fuel' },\r\n            { Id: 7, name: 'Gpu' },\r\n            { Id: 8, name: 'Handling' },\r\n            { Id: 9, name: 'Hotel' },\r\n            { Id: 10, name: 'Intial' },\r\n            { Id: 11, name: 'Lav' },\r\n            { Id: 12, name: 'Other' },\r\n            { Id: 14, name: 'Secondary' },\r\n            { Id: 15, name: 'Water' }\r\n        ];\r\n\r\n        self.transportationType = [\r\n           { Id: 1, type: 'rental', abbreviation: 'R' },\r\n           { Id: 2, type: 'limo', abbreviation: 'L' },\r\n           { Id: 3, type: 'taxi', abbreviation: 'T' },\r\n           { Id: 4, type: 'crew car', abbreviation: 'C' },\r\n           { Id: 5, type: 'personal', abbreviation: 'P'}\r\n        ];\r\n\r\n        self.flightDirection = [{ id: 1, name: \"arrival\" }, { id: 2, name: \"departure\" }];\r\n        self.heavyCharterTypes = [\"tx\"];\r\n        self.flightBoardRoute = \"root.appLayout.flightBoard\";\r\n        self.prefix = \"Flight\";\r\n        self.fuelTypes = ['jet a +', 'avgas', '100ll', 'jet a -'];\r\n        self.sections = { arrival: 'arrival', sameDay: 'sameDay', departure: 'departure' };\r\n\r\n        return {\r\n            StructureReservationData: structureReservationData,\r\n            GetReservationsByBase: getReservationsByBase,\r\n            GetUserSettings: getUserSettings,\r\n            FlattenReservation: flattenReservation,\r\n            TriggerModal: triggerModal,\r\n            IsQuickTurn: isQuickTurn,\r\n            SortFlights: sortFlights,\r\n            IsHeavyCharter: isHeavyCharter,\r\n            RemoveFlights: removeFlights,\r\n            GetFlights: getFlights,\r\n            CheckDeparturesForHeavyTransport: checkDeparturesForHeavyTransport\r\n        };\r\n\r\n\r\n\r\n        function triggerModal(route) {\r\n            var trigger = false;\r\n\r\n            if (route !== self.flightBoardRoute) { return trigger; }\r\n\r\n            if (CurrentUserService.GetFlightBoardConfiguration() === null) {\r\n                var modalInstance = $uibModal.open({\r\n                    animation: true,\r\n                    templateUrl: 'app/core/templates/modal/warningModal.html',\r\n                    controller: 'WarningModalController',\r\n                    size: '',\r\n                });\r\n                trigger = true;\r\n            }\r\n            return trigger;\r\n        }\r\n\r\n        /*API Services*/\r\n\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Gets Flight Reservations. \r\n         * @param data an object with three properties: BaseId, StartDateTime, and DurationHours. \r\n         * @return an Http promise that when resolved will give access to reservations in two categories\r\n         * Arrivals and Departures (For ex. {Arrivals: [], Departures: []})\r\n         */\r\n        function getReservationsByBase(data) {\r\n            return HttpRequestService.Go({\r\n                method: \"POST\",\r\n                url: AuthenticationSettings.ResourcesAPI + \"api/FlightBoard/\" + \"GetReservationsByBase\",\r\n                data: JSON.stringify(data)\r\n            });\r\n        }\r\n\r\n        function getUserSettings() {\r\n            return {\r\n                BaseId: \"P08\",\r\n                Roles: []\r\n            };\r\n        }\r\n\r\n\r\n        /*FlightBoard Logic*/\r\n\r\n        function setPaginationCounter(itemsPerPage, dataLength, currentPage) {\r\n            var begin, end;\r\n            begin = (currentPage - 1) * itemsPerPage;\r\n            end = begin + itemsPerPage;\r\n            if ((end - dataLength) > 0) {\r\n                var difference = dataLength - begin;\r\n                end = begin + difference;\r\n            }\r\n            begin += 1;\r\n            return { begin: begin, end: end };\r\n        }\r\n\r\n        function createFlightObject(pageNum, itemsPerPage, hourRange, date) {\r\n            var obj = {\r\n                Pagination: { CurrentPage: pageNum, itemsPerPage: itemsPerPage },\r\n                Date: date,\r\n                HourRange: hourRange\r\n            };\r\n            return obj;\r\n        }\r\n\r\n        function calculateHourRange(arithmetic, hourRange) {\r\n            if (hourRange === 0 && arithmetic == \"s\") {\r\n                return 0;\r\n            }\r\n\r\n            if (arithmetic == \"s\") {\r\n                hourRange -= 1;\r\n            }\r\n\r\n            if (arithmetic == \"a\") {\r\n                hourRange += 1;\r\n            }\r\n\r\n            return hourRange;\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * gets same day, and heavy charter flights \r\n         * formats departure dates and looks for heavy charters\r\n         * removes same day flights and heavy charters from arrival and departure arrays.\r\n         * @param data encapsulates both arrivals and departures\r\n         * @return an object with three properties: sameDayFlights, heavyCharters, and data (Arrivals and Departures)\r\n         */\r\n        function structureReservationData(data) {\r\n            if (HelperMethodsService.IsObjectNull(data)) return;\r\n\r\n            var sameDayFlights = [],\r\n                heavyCharters = [],\r\n                arrivals = data.Arrivals,\r\n                departures = data.Departures;\r\n     \r\n            getFlights(arrivals, sameDayFlights, heavyCharters);\r\n            checkDeparturesForHeavyTransport(departures, heavyCharters);\r\n            removeFlights(arrivals, departures, sameDayFlights, heavyCharters);\r\n\r\n            sortArrivals(arrivals);\r\n            sortSameDayFlights(sameDayFlights);\r\n            sortDepartures(departures);\r\n            sortHeavyCharters(heavyCharters);\r\n\r\n            return { sameDayFlights: sameDayFlights, heavyCharters: heavyCharters, data: data };\r\n        }\r\n\r\n       /**\r\n         * The following four functions are used to initiate the sort methods for \r\n         * the flights. \r\n         */\r\n        function sortArrivals(arrivals) {\r\n            sortFlights(arrivals, self.sections.arrival);\r\n            for (var i in arrivals) {\r\n                formatReservationTimes(arrivals[i], self.flightDirection[0].id);\r\n            }\r\n        }\r\n        \r\n        function sortSameDayFlights(sameDayFlights) {\r\n            sortFlights(sameDayFlights, self.sections.sameDay);\r\n            for (var i in sameDayFlights) {\r\n                formatReservationTimes(sameDayFlights[i]);\r\n            }\r\n        }\r\n        \r\n        function sortDepartures(departures) {\r\n            sortFlights(departures, self.sections.departure);\r\n            for (var i = 0; i < departures.length; i++) {\r\n                formatReservationTimes(departures[i], self.flightDirection[1].id);\r\n           }\r\n        }\r\n\r\n        function sortHeavyCharters(heavyCharters) {\r\n            for (var i = 0; i < heavyCharters.length; i++) {\r\n                if (heavyCharters[i].IsArrival === true) {\r\n                    formatReservationTimes(heavyCharters[i], self.flightDirection[0].id);\r\n                }\r\n                else if(heavyCharters[i].IsDeparture === true) {\r\n                    formatReservationTimes(heavyCharters[i], self.flightDirection[1].id);\r\n                }\r\n                else if (heavyCharters[i].IsSameDay === true) {\r\n                    formatReservationTimes(heavyCharters[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * iterates through the departure array to find heavy transport flights.\r\n         * @param departures array with departure flights\r\n         * @param heavyCharters array with heavy flights \r\n         */\r\n        function checkDeparturesForHeavyTransport(departures, heavyCharters) {\r\n            for (var i = 0; i < departures.length; i++) {             \r\n                if (isHeavyCharter(departures[i])) {\r\n                    departures[i].IsDeparture = true;\r\n                    heavyCharters.push(departures[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function sortFlights(array, section) {\r\n            if (HelperMethodsService.IsObjectNull(array)) return;\r\n\r\n            if (section === self.sections.arrival) {\r\n                array.sort(function (aFlight, bFlight) {\r\n                    var aDateTime;\r\n                    var bDateTime;\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(aFlight.ArrivalFlightInformation.FlightDateTime)) {\r\n                        aDateTime = aFlight.ArrivalFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(aFlight.ArrivalFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(aFlight.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                        aDateTime = aFlight.ArrivalFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(bFlight.ArrivalFlightInformation.FlightDateTime)) {\r\n                        bDateTime = bFlight.ArrivalFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(bFlight.ArrivalFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(bFlight.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                        bDateTime = bFlight.ArrivalFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    return aDateTime > bDateTime ? 1 : -1;\r\n\r\n                });\r\n            }\r\n\r\n            if (section === self.sections.sameDay) {\r\n                array.sort(function (aFlight, bFlight) {\r\n\r\n\r\n                    var aDateTime = sortMethodForSameDayFlights(aFlight);\r\n                    var bDateTime = sortMethodForSameDayFlights(bFlight);\r\n\r\n                    return aDateTime > bDateTime ? 1 : -1;\r\n                });\r\n            }\r\n\r\n            if (section === self.sections.departure) {\r\n                array.sort(function (aFlight, bFlight) {\r\n                    var aDateTime;\r\n                    var bDateTime;\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(aFlight.DepartureFlightInformation.FlightDateTime)) {\r\n                        aDateTime = aFlight.DepartureFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(aFlight.DepartureFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(aFlight.DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                        aDateTime = aFlight.DepartureFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(bFlight.DepartureFlightInformation.FlightDateTime)) {\r\n                        bDateTime = bFlight.DepartureFlightInformation.FlightDateTime;\r\n                    }\r\n                    else if (HelperMethodsService.IsPropertyEmpty(bFlight.DepartureFlightInformation.FlightDateTime) && !HelperMethodsService.IsPropertyEmpty(bFlight.DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                        bDateTime = bFlight.DepartureFlightInformation.EstimatedFlightDateTime;\r\n                    }\r\n\r\n                    return aDateTime > bDateTime ? 1 : -1;\r\n                });\r\n            }\r\n            return array;\r\n        }\r\n\r\n\r\n        function sortMethodForSameDayFlights(flight) {\r\n            var dateTime;\r\n            var enter = false;\r\n\r\n            if (!HelperMethodsService.IsPropertyEmpty(flight.DepartureFlightInformation.FlightDateTime)) {\r\n                enter = true;\r\n                dateTime = flight.DepartureFlightInformation.FlightDateTime;\r\n            }\r\n            else if (!enter) {\r\n                if ((!HelperMethodsService.IsPropertyEmpty(flight.DepartureFlightInformation.EstimatedFlightDateTime) && !HelperMethodsService.IsPropertyEmpty(flight.ArrivalFlightInformation.FlightDateTime))) {\r\n                    enter = true;\r\n                    dateTime = flight.DepartureFlightInformation.EstimatedFlightDateTime;\r\n                }\r\n\r\n                if (!enter && !HelperMethodsService.IsPropertyEmpty(flight.ArrivalFlightInformation.FlightDateTime)) {\r\n                    enter = true;\r\n                    dateTime = flight.ArrivalFlightInformation.FlightDateTime;\r\n                }\r\n\r\n                if (!enter && !HelperMethodsService.IsPropertyEmpty(flight.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                    enter = true;\r\n                    dateTime = flight.ArrivalFlightInformation.EstimatedFlightDateTime;\r\n                }\r\n            }\r\n\r\n            return dateTime;\r\n\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Flattens the data for arrivals and departures.  \r\n         * @param data encapsulates both arrivals and departures\r\n        */\r\n        function flattenReservation(data) {\r\n            if (HelperMethodsService.IsObjectNull(data)) return;\r\n\r\n            var arrivals = data.Arrivals,\r\n                departures = data.Departures;\r\n\r\n            startFlattenProcess(arrivals);\r\n            startFlattenProcess(departures);\r\n        }\r\n\r\n        /*Private functions */\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Iterates through the arrivals array and finds same day and or heavy transport flights. The arrivals array is the only \r\n         * array that will possibly have same day flights. The dates in the arrival flights and their corresponding departures \r\n         * are formatted accordingly. \r\n         * @param arrivals array with arrival flights filtered by the flightboard calendar date and corresponding departure flights. \r\n         * @param sameDayFlights empty array to hold flights (arrivals and departures) on the same day. \r\n         * @param heavyCharters empty array to hold flights that are considered heavy. \r\n         */\r\n        function getFlights(arrivals, sameDayFlights, heavyCharters) {\r\n\r\n            for (var i = 0; i < arrivals.length; i++) {\r\n                if (!HelperMethodsService.IsObjectNull(arrivals[i].ArrivalFlightInformation) && !HelperMethodsService.IsObjectNull(arrivals[i].DepartureFlightInformation)) {\r\n                    if (DateTimeService.FormatDate(arrivals[i].ArrivalFlightInformation.EstimatedFlightDateTime) == DateTimeService\r\n                        .FormatDate(arrivals[i].DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                        isQuickTurn(arrivals[i]);\r\n                        //  formatReservationTimes(arrivals[i]);\r\n                        if (isHeavyCharter(arrivals[i])) {\r\n                            arrivals[i].IsSameDay = true;\r\n                            heavyCharters.push(arrivals[i]);\r\n                        }\r\n                        else {\r\n                            sameDayFlights.push(arrivals[i]);\r\n                        }\r\n\r\n                        continue;\r\n                    }\r\n                }\r\n                //   formatReservationTimes(arrivals[i], self.flightDirection[0].id);\r\n                if (isHeavyCharter(arrivals[i])) {\r\n                    arrivals[i].IsArrival = true;\r\n                    heavyCharters.push(arrivals[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Checks if the Departure time minus the arrival time is greater than -1 or less than or equal to 30 mins. \r\n         * If the expression is true, the flight is considered a Quick Turn. \r\n         * @param arrival a flight object from the arrivals. \r\n         */\r\n        function isQuickTurn(arrival) {\r\n            arrival.QuickTurn = false;\r\n            if (!HelperMethodsService.IsPropertyEmpty(arrival.ArrivalFlightInformation.FlightDateTime)) { startDate = arrival.ArrivalFlightInformation.FlightDateTime; }\r\n            else { startDate = arrival.ArrivalFlightInformation.EstimatedFlightDateTime; }\r\n            var difference = DateTimeService.GetDifference(startDate, arrival.DepartureFlightInformation.EstimatedFlightDateTime, \"minutes\");\r\n            if (difference > -1 && difference <= 30) { arrival.QuickTurn = true; }\r\n            return arrival;\r\n        }\r\n\r\n        function isHeavyCharter(flight) {\r\n            return ((!HelperMethodsService.IsPropertyEmpty(flight.AircraftType)) && (self.heavyCharterTypes.indexOf(flight.AircraftType.toLowerCase()) > -1));\r\n        }\r\n\r\n        function removeFlights(arrivals, departures, sameDayFlights, heavyCharters) {\r\n            for (var i in sameDayFlights) {\r\n                var index = arrivals.indexOf(sameDayFlights[i]);\r\n                if (index > -1) { arrivals.splice(index, 1); }\r\n            }\r\n\r\n            for (var j in heavyCharters) {\r\n                var arrivalsIndex = arrivals.indexOf(heavyCharters[j]);\r\n                if (arrivalsIndex > -1) { arrivals.splice(arrivalsIndex, 1); }\r\n                var departuresIndex = departures.indexOf(heavyCharters[j]);\r\n                if (departuresIndex > -1) { departures.splice(departuresIndex, 1); }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Checks if the flight object is an arrival or departure and formats the date according to the flight\r\n         * direction id. If the flight direction id is null or undefined then the logic defaults to formatting \r\n         * the date with just the time. \r\n         * @param obj a flight object \r\n         * @param flightDirectionId an id that dictates if the flight object is an arrival or departure flight object. \r\n         */\r\n        function formatReservationTimes(obj, flightDirectionId) {\r\n            if (!HelperMethodsService.IsObjectNull(obj.ArrivalFlightInformation)) {\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.ArrivalFlightInformation.FlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.ArrivalFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.FlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.ArrivalFlightInformation.FlightDateTime = DateTimeService.FormatDate(obj.ArrivalFlightInformation.FlightDateTime); }\r\n                    else { obj.ArrivalFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.FlightDateTime); }\r\n                }\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.ArrivalFlightInformation.EstimatedFlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.ArrivalFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.EstimatedFlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.ArrivalFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatDate(obj.ArrivalFlightInformation.EstimatedFlightDateTime); }\r\n                    else { obj.ArrivalFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.ArrivalFlightInformation.EstimatedFlightDateTime); }\r\n                }\r\n            }\r\n\r\n            if (!HelperMethodsService.IsObjectNull(obj.DepartureFlightInformation)) {\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.DepartureFlightInformation.FlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.DepartureFlightInformation.FlightDateTime = DateTimeService.FormatDate(obj.DepartureFlightInformation.FlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.DepartureFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.FlightDateTime); }\r\n                    else { obj.DepartureFlightInformation.FlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.FlightDateTime); }\r\n                }\r\n                if (!HelperMethodsService.IsPropertyEmpty(obj.DepartureFlightInformation.EstimatedFlightDateTime)) {\r\n                    if (flightDirectionId == 1) { obj.DepartureFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatDate(obj.DepartureFlightInformation.EstimatedFlightDateTime); }\r\n                    else if (flightDirectionId == 2) { obj.DepartureFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.EstimatedFlightDateTime); }\r\n                    else { obj.DepartureFlightInformation.EstimatedFlightDateTime = DateTimeService.FormatTime(obj.DepartureFlightInformation.EstimatedFlightDateTime); }\r\n                }\r\n            }\r\n        }\r\n\r\n        function startFlattenProcess(data) {\r\n            for (var i in data) {\r\n                flattenGroundTransportation(data[i]);\r\n                flattenAircraftServices(data[i]);\r\n                flattenTransactionPayment(data[i]);\r\n\r\n                if (data[i].CustomsRequiredInbound === false) { data[i].CustomsRequiredInbound = \"\"; }\r\n                else if (data[i].CustomsRequiredInbound === true) { data[i].CustomsRequiredInbound = \"Y\"; }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * This function does the following: \r\n         * Checks if there is a valid aircraft service and creates a object with the\r\n         * service and attaches it to the obj param\r\n         * @param obj a flight object\r\n         */\r\n        function flattenAircraftServices(obj) {\r\n            for (var i in obj.AircraftServices) {\r\n\r\n                for (var j in self.serviceCategory) {\r\n\r\n                    if (!HelperMethodsService.IsPropertyEmpty(obj.AircraftServices[i].ServiceCategory) && (obj.AircraftServices[i].ServiceCategory.toLowerCase() == self.serviceCategory[j].name.toLowerCase())) {\r\n\r\n                        if (!HelperMethodsService.IsObjectNull(obj.Fuel) && obj.AircraftServices[i].ServiceCategory.toLowerCase() === \"fuel\") {\r\n                            obj.Fuel.Quantity += obj.AircraftServices[i].Quantity;\r\n                            obj.Fuel.Comments += \", \" + obj.AircraftServices[i].Comments;\r\n                            break;\r\n                        }\r\n\r\n                        obj[self.serviceCategory[j].name] = {};\r\n                        obj[self.serviceCategory[j].name].Active = obj.AircraftServices[i].Active;\r\n                        obj[self.serviceCategory[j].name].AircraftServiceId = obj.AircraftServices[i].AircraftServiceId;\r\n                        obj[self.serviceCategory[j].name].Comments = obj.AircraftServices[i].Comments;\r\n                        obj[self.serviceCategory[j].name].LastUpdatedBy = obj.AircraftServices[i].LastUpdatedBy;\r\n                        obj[self.serviceCategory[j].name].ProductCode = obj.AircraftServices[i].ProductCode;\r\n                        obj[self.serviceCategory[j].name].Quantity = obj.AircraftServices[i].Quantity;\r\n                        obj[self.serviceCategory[j].name].ServiceCategory = obj.AircraftServices[i].ServiceCategory;\r\n                        obj[self.serviceCategory[j].name].ServiceCategoryId = obj.AircraftServices[i].ServiceCategoryId;\r\n                        obj[self.serviceCategory[j].name].Status = obj.AircraftServices[i].Status;\r\n                        obj[self.serviceCategory[j].name].Type = obj.AircraftServices[i].Type;\r\n\r\n                        if (self.serviceCategory[j].name.toLowerCase() == \"fuel\") {\r\n                            //checks for avgas\r\n                            if (!HelperMethodsService.IsPropertyEmpty(obj.AircraftServices[i].ProductDescription) && (obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('avgas') > -1 || obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('100ll') > -1)) {\r\n                                obj[self.serviceCategory[j].name].ProductDescription = \"A\";\r\n                            }\r\n\r\n                            //checks to see if there is prist or fsii\r\n                            if (!HelperMethodsService.IsPropertyEmpty(obj.AircraftServices[i].ProductDescription) && (obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('prist') > -1 || obj.AircraftServices[i].ProductDescription.toLowerCase().indexOf('fsii') > -1)) {\r\n                                obj[self.serviceCategory[j].name].ProductDescription = \"JET A +\";\r\n                            }\r\n\r\n                            //if description is still empty then give it a default value. \r\n                            if (HelperMethodsService.IsPropertyEmpty(obj[self.serviceCategory[j].name].ProductDescription)) {\r\n                                obj[self.serviceCategory[j].name].ProductDescription = \"JET A -\";\r\n                            }\r\n                        }\r\n                        else {\r\n                            obj[self.serviceCategory[j].name].ProductDescription = obj.AircraftServices[i].ProductDescription;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        /**\r\n         * This function does the following: \r\n         * iterates through all of the ground transportation objects of a flight, \r\n         * and when it finds a match in the transportation type array, its sets \r\n         * the value to the AllTransportations in the obj. \r\n         * @param obj a flight object\r\n         */\r\n        function flattenGroundTransportation(obj) {\r\n\r\n            if (HelperMethodsService.IsObjectNull(obj.GroundTransportations)) return;\r\n\r\n            var all = [];\r\n\r\n            for (var i in obj.GroundTransportations) {\r\n                for (var j in self.transportationType) {\r\n                    if (!HelperMethodsService.IsPropertyEmpty(obj.GroundTransportations[i].CarType.Name) && (obj.GroundTransportations[i].CarType.Name.toLowerCase() === self.transportationType[j].type)) {\r\n\r\n                        var nameAbbreviation = self.transportationType[j].abbreviation; // CarType\r\n                        var type = obj.GroundTransportations[i].Type.Name; // Crew or Passenger\r\n\r\n                        if (!HelperMethodsService.IsPropertyEmpty(type) && (type.toLowerCase() == \"passenger\")) { type = \"P\"; }\r\n                        if (!HelperMethodsService.IsPropertyEmpty(type) && (type.toLowerCase() == \"crew\")) { type = \"C\"; }\r\n\r\n                        var fullTransportationLabel = type + \"\" + nameAbbreviation;\r\n\r\n                        all.push({ label: fullTransportationLabel, count: 1 });\r\n\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var array = angular.copy(all);\r\n            for (var b in array) {\r\n                var current = array[b];\r\n                for (var c in array) {\r\n                    if (current.label == array[c].label && b !== c && current.flagged !== true) {\r\n                        //found a match, flag the match \r\n                        array[c].flagged = true;\r\n                        current.count += 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            obj.AllTransportations = { Text: \"\", Status: true };\r\n            for (var s in array) {\r\n                if (array[s].flagged !== true) {\r\n                    if (obj.AllTransportations.Text.length > 0) { obj.AllTransportations.Text += \", \"; }\r\n                    obj.AllTransportations.Text += array[s].label + \"(\" + array[s].count + \")\";\r\n                }\r\n            }\r\n        }\r\n\r\n        function flattenTransactionPayment(obj) {\r\n            obj.InvoiceIcon = \"\";\r\n            obj.InvoiceText = \"\";\r\n            var transactionPaymentStatus = [];\r\n\r\n            if (HelperMethodsService.IsPropertyEmpty(obj.PosTransactionId)) return;\r\n\r\n            var array = obj.Payments,\r\n                transactionHeaderStatus = obj.PosTransactionStatus,\r\n                directBillNumber = obj.DirectBillNumber;\r\n\r\n            for (var i in array) {\r\n                transactionPaymentStatus.push(array[i].Status);\r\n            }\r\n\r\n            if (transactionPaymentStatus.indexOf(2) > -1) {\r\n                obj.InvoiceIcon = \"fa fa-usd\";\r\n            }\r\n            else if (((transactionPaymentStatus.indexOf(32) > -1 && transactionHeaderStatus == 1) && transactionPaymentStatus.indexOf(2) === -1) || obj.CardOnFile === true) {\r\n                obj.InvoiceText = \"CS\";\r\n            }\r\n            else if (!HelperMethodsService.IsPropertyEmpty(directBillNumber)) {\r\n                obj.InvoiceIcon = \"fa fa-check\";\r\n            }\r\n            else {\r\n                obj.InvoiceIcon = \"fa fa-asterisk\";\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n    angular\r\n\t\t.module('app')\r\n\t\t.controller(\"IndexController\", IndexController);\r\n\r\n    IndexController.$inject = ['$scope'];\r\n\r\n\r\n    function IndexController($scope) {\r\n        var vm = this;\r\n        vm.title = \"Index Controller\";\r\n        $scope.title = \"Index Controller\";\r\n\r\n        vm.httpRequestPromise = undefined;\r\n\r\n        $scope.$on('loadSplashScreen', function (event, args) {\r\n            vm.httpRequestPromise = args.httpPromise;\r\n        });\r\n\r\n        function activate() { }\r\n\r\n        activate();\r\n\r\n    }\r\n\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('LoginController', LoginController);\r\n\r\n    LoginController.$inject = ['$scope', '$state', 'AuthenticationService'];\r\n\r\n    function LoginController($scope, $state, AuthenticationService) {\r\n        var vm = this;\r\n\r\n        vm.title = 'Login Controller';\r\n        vm.loginPromise = undefined;\r\n        vm.displayError = undefined;\r\n        vm.errorMessage = undefined;\r\n\r\n        vm.userCredentails = {};\r\n\r\n        vm.loginUser = loginUser;\r\n\r\n        function loginUser() {\r\n            if (vm.loginForm.$invalid) {\r\n                return;\r\n            }\r\n            vm.displayError = false;\r\n            var userObject = {\r\n                grant_type: \"password\",\r\n                username: vm.userCredentails.username,\r\n                password: vm.userCredentails.password\r\n            };\r\n\r\n            vm.loginPromise = AuthenticationService.LoginUser(userObject);\r\n\r\n            $scope.$emit('loadSplashScreen', { httpPromise: vm.loginPromise });\r\n\r\n            vm.loginPromise.then(function (data) {\r\n                $state.go('root.appLayout.dashboard');\r\n            }).catch(function (err) {\r\n                vm.displayError = true;\r\n                if ((err !== null) && err.error === \"ad_error\") {\r\n                    vm.errorMessage = \"You have entered the wrong username or password\";\r\n                }\r\n                else if (err === null || err === undefined) {\r\n                    vm.errorMessage = \"Login Connectivity has been lost\";\r\n                }\r\n                console.log(err);\r\n            });\r\n        }\r\n\r\n        activate();\r\n\r\n        function activate() { }\r\n    }\r\n})();","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .factory('LoginService', LoginService);\r\n\r\n    LoginService.$inject = ['HttpRequestService', 'AuthenticationSettings'];\r\n\r\n    function LoginService(HttpRequestService, AuthenticationSettings) {\r\n        return {\r\n            PostLogin: postLogin\r\n        };\r\n\r\n        function postLogin(userObject) {\r\n            var user = {userObject: {email: userObject.username , password: userObject.password}};\r\n\r\n\r\n            return HttpRequestService.Go({\r\n                method: 'POST',\r\n                url: AuthenticationSettings.AuthenticationAPI,\r\n                data: user,\r\n                headers: { 'Content-type': 'application/json' } //\r\n            });\r\n        }\r\n    }\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('SimpleLoginController', SimpleLoginController);\r\n\r\n    SimpleLoginController.$inject = ['$timeout', '$state'];\r\n\r\n    function SimpleLoginController($timeout, $state) {\r\n        var vm = this;\r\n        vm.passcode = []; \r\n        vm.numbers = [\r\n            { id: \"1\", text: \"one\" },\r\n            { id: \"2\", text: \"two\" },\r\n            { id: \"3\", text: \"three\" },\r\n            { id: \"4\", text: \"four\" },\r\n            { id: \"5\", text: \"five\" },\r\n            { id: \"6\", text: \"six\" },\r\n            { id: \"7\", text: \"seven\" },\r\n            { id: \"8\", text: \"eight\" },\r\n            { id: \"9\", text: \"nine\" },\r\n            { id: \"0\", text: \"zero\" },\r\n        ];\r\n        vm.smallCircles = [false, false,false, false, false, false];\r\n\r\n\r\n        vm.ClickedCircle = clickedCircle;\r\n        vm.DeletePasscode = deletePasscode;\r\n\r\n        function clickedCircle(id) {\r\n            vm[id] = true;\r\n            $timeout(function () {\r\n                vm[id] = false; \r\n            }, 200);\r\n          \r\n            saveNumber(id);           \r\n            colorSmallCircle();\r\n            checkPasscodeLength(); \r\n        }\r\n\r\n        function saveNumber(id) {          \r\n            for(var i in vm.numbers) {\r\n                if (vm.numbers[i].text === id) {\r\n                    vm.passcode.push(vm.numbers[i].id);                  \r\n                    break; \r\n                }\r\n            }\r\n        }\r\n\r\n        function colorSmallCircle() {\r\n            var length = vm.passcode.length - 1;\r\n            vm.smallCircles[length] = true;\r\n\r\n        }\r\n\r\n        function loginUser(callback) {\r\n            callback(\"Error\", null);\r\n        }\r\n\r\n        function checkPasscodeLength() {\r\n            if (vm.passcode.length == 6) {\r\n                loginUser(function (err, res) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                        vm.passcode = [];\r\n                        $timeout(function () {\r\n                            for (var i in vm.smallCircles) {\r\n                                vm.smallCircles[i] = false;\r\n                            }\r\n                        }, 300);\r\n                    }\r\n                    \r\n                    if (res) {\r\n                        $state.go(\"root.login\");\r\n                    }\r\n                });           \r\n            }   \r\n        }\r\n\r\n        function deletePasscode() {\r\n            var index = vm.passcode.length - 1;\r\n            vm.smallCircles[index] = false;\r\n            vm.passcode.splice(index, 1); \r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n})(); ","(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module('app')\r\n        .controller('RootController', RootController);\r\n\r\n    RootController.$inject = [];\r\n\r\n    function RootController() { }\r\n})();\r\n","(function () {\r\n    angular\r\n        .module('app')\r\n        .controller('ReportController', ReportController);\r\n\r\n    ReportController.$inject = ['$window', 'LookupService', 'DateTimeService'];\r\n\r\n    function ReportController($window, LookupService, DateTimeService) {\r\n        var vm = this;\r\n  \r\n        activate();\r\n\r\n        function activate() {}\r\n\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n\tangular\r\n\t\t.module('app')\r\n\t\t.factory('ReportService', ReportService);\r\n\r\n\tReportService.$inject = ['AuthenticationSettings', '$window'];\r\n\r\n\tfunction ReportService(AuthenticationSettings, $window) {\r\n\r\n\t\treturn {\r\n\t\t\tGenerateReservationReport: generateReservationReport\r\n\t\t};\r\n\r\n\t\tfunction generateReservationReport(model) {\r\n\t\t    $window.open(AuthenticationSettings.ResourcesAPI + \"Report/Reservations/\" + model.baseId + \"/\" + model.startDateTime + \"/\" + model.durationHours);\t   \r\n\t\t}\r\n\t}\r\n})();","(function () {\r\n    angular\r\n        .module('app')\r\n        .controller('ReservationsReportController', ReservationsReportController);\r\n\r\n    ReservationsReportController.$inject = ['DateTimeService', 'ReportService', 'LookupService', 'CurrentUserService', 'ApplicationInsightsService'];\r\n\r\n    function ReservationsReportController(DateTimeService, ReportService, LookupService, CurrentUserService, ApplicationInsightsService) {\r\n        var vm = this;\r\n\r\n        vm.currentUser = CurrentUserService.GetCurrentUserData('authenticationData');\r\n\r\n        vm.formats = DateTimeService.GetDateFormats();\r\n        vm.format = vm.formats[3];\r\n        vm.dateOptions = DateTimeService.GetDateOptions();\r\n        vm.altInputFormats = DateTimeService.GetAltInputFormats();\r\n        vm.baseId = undefined;\r\n        vm.startDateTime = undefined;\r\n        vm.isOpen = false; \r\n\r\n        vm.ViewReport = viewReport;\r\n        vm.BaseSelected = baseSelected;\r\n        vm.GetBaseId = getBaseId;\r\n        vm.Open = open;\r\n        vm.Reset = reset;\r\n\r\n\r\n        activate();\r\n\r\n        function activate() {\r\n            LookupService.FormatBases(function (err, res) {\r\n                if (err) {\r\n                    ApplicationInsightsService.TrackException(err.message, \"GET CPA BASES (ReservationsReport)\", { userName: vm.currentUser.userName, errorObject: err });                 \r\n                    console.log(err);\r\n                    return;\r\n                }\r\n                vm.bases = res;\r\n                ApplicationInsightsService.TrackEvent(\"Status: 200, Action: GET CPA BASES, handled: ReservationReport\");\r\n            });\r\n\r\n           vm.startDateTime = new Date();\r\n        }\r\n\r\n        function viewReport() {\r\n            if (!getBaseId() || !vm.startDateTime) {\r\n                vm.submit = true;\r\n                return;\r\n            }\r\n            var model = {\r\n                baseId: getBaseId(),\r\n                startDateTime: DateTimeService.FormatDateYear(vm.startDateTime),\r\n                durationHours: 24\r\n            };\r\n            ReportService.GenerateReservationReport(model);\r\n        }\r\n\r\n        function open() {\r\n            vm.isOpen = !vm.isOpen; \r\n        }\r\n\r\n        function baseSelected(item, model, label) {\r\n            setBaseId(model.BaseId);\r\n        }\r\n\r\n        function setBaseId(id) {\r\n            vm.baseId = id;\r\n        }\r\n\r\n        function getBaseId() {\r\n            return vm.baseId;\r\n        }\r\n\r\n        function reset() {\r\n            if (vm.selected === undefined) {\r\n                 vm.baseId = undefined; \r\n            }\r\n        }      \r\n    }\r\n\r\n})();"]}